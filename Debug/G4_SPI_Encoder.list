
G4_SPI_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f20  08004f20  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000060  08004f88  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004f88  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd6c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268a  00000000  00000000  0002fe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  000324d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000970  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251e9  00000000  00000000  00033a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f20  00000000  00000000  00058c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9f17  00000000  00000000  00069ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003634  00000000  00000000  00153ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001570ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004e7c 	.word	0x08004e7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08004e7c 	.word	0x08004e7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <as50_readAngle>:

	return (parity & 0x1);
}

bool as50_readAngle(uint16_t * data, uint32_t timeout)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f000 ff04 	bl	80013dc <HAL_GPIO_WritePin>
	  //as50_delay(1); TODO check if it affected performance

	  if (HAL_SPI_TransmitReceive(&_ENCODER_SPI, (uint8_t*)&read_angle_register, (uint8_t*)data, 1, timeout) == HAL_OK)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4911      	ldr	r1, [pc, #68]	; (8000624 <as50_readAngle+0x68>)
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <as50_readAngle+0x6c>)
 80005e0:	f001 ffe5 	bl	80025ae <HAL_SPI_TransmitReceive>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10f      	bne.n	800060a <as50_readAngle+0x4e>
	  {
		  //as50_delay(1); TODO check if it affected performance
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f000 fef2 	bl	80013dc <HAL_GPIO_WritePin>
		  *data &= _ENCODER_READMASK;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000600:	b29a      	uxth	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	801a      	strh	r2, [r3, #0]
		  return true;
 8000606:	2301      	movs	r3, #1
 8000608:	e007      	b.n	800061a <as50_readAngle+0x5e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(_ENCODER_NSS_GPIO, _ENCODER_NSS_PIN, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 fee2 	bl	80013dc <HAL_GPIO_WritePin>
		  return false;
 8000618:	2300      	movs	r3, #0
	  }
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000
 8000628:	2000007c 	.word	0x2000007c

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2e      	ldr	r2, [pc, #184]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0320 	and.w	r3, r3, #32
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_GPIO_Init+0xd4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a28      	ldr	r2, [pc, #160]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a22      	ldr	r2, [pc, #136]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_GPIO_Init+0xd4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_GPIO_Init+0xd4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0308 	and.w	r3, r3, #8
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f248 0120 	movw	r1, #32800	; 0x8020
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f000 fe96 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2104      	movs	r1, #4
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <MX_GPIO_Init+0xd8>)
 80006b6:	f000 fe91 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80006ba:	f248 0320 	movw	r3, #32800	; 0x8020
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f000 fcff 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006da:	2304      	movs	r3, #4
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0xd8>)
 80006f2:	f000 fcf1 	bl	80010d8 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	48000c00 	.word	0x48000c00

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 fa80 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f825 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f7ff ff89 	bl	800062c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800071a:	f000 f9a5 	bl	8000a68 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800071e:	f000 f86f 	bl	8000800 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  uint16_t ang;
  uint8_t str[100];
  int i = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  as50_readAngle(&ang, 100);
 8000726:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 800072a:	2164      	movs	r1, #100	; 0x64
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff45 	bl	80005bc <as50_readAngle>
	  sprintf(str,"angle: %d \n \r ", ang);
 8000732:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000736:	461a      	mov	r2, r3
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4907      	ldr	r1, [pc, #28]	; (8000758 <main+0x50>)
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fef9 	bl	8004534 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, str, 22);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2216      	movs	r2, #22
 8000746:	4619      	mov	r1, r3
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <main+0x54>)
 800074a:	f002 faf7 	bl	8002d3c <HAL_UART_Transmit_IT>
	  HAL_Delay(100);
 800074e:	2064      	movs	r0, #100	; 0x64
 8000750:	f000 fad0 	bl	8000cf4 <HAL_Delay>
  {
 8000754:	e7e7      	b.n	8000726 <main+0x1e>
 8000756:	bf00      	nop
 8000758:	08004e94 	.word	0x08004e94
 800075c:	200000e4 	.word	0x200000e4

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2238      	movs	r2, #56	; 0x38
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 ff00 	bl	8004574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fe42 	bl	800140c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	2303      	movs	r3, #3
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800079a:	2301      	movs	r3, #1
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 800079e:	2328      	movs	r3, #40	; 0x28
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fece 	bl	8001554 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007be:	f000 f81a 	bl	80007f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2104      	movs	r1, #4
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f9d0 	bl	8001b84 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ea:	f000 f804 	bl	80007f6 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fa:	b672      	cpsid	i
}
 80007fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fe:	e7fe      	b.n	80007fe <Error_Handler+0x8>

08000800 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_SPI3_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_SPI3_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_SPI3_Init+0x74>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI3_Init+0x74>)
 800081a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800081e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_SPI3_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI3_Init+0x74>)
 800082e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000832:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI3_Init+0x74>)
 8000836:	2210      	movs	r2, #16
 8000838:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI3_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SPI3_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI3_Init+0x74>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SPI3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI3_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_SPI3_Init+0x74>)
 8000860:	f001 fdfa 	bl	8002458 <HAL_SPI_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800086a:	f7ff ffc4 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000007c 	.word	0x2000007c
 8000878:	40003c00 	.word	0x40003c00

0800087c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a20      	ldr	r2, [pc, #128]	; (800091c <HAL_SPI_MspInit+0xa0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d139      	bne.n	8000912 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <HAL_SPI_MspInit+0xa4>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <HAL_SPI_MspInit+0xa4>)
 80008a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a8:	6593      	str	r3, [r2, #88]	; 0x58
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <HAL_SPI_MspInit+0xa4>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <HAL_SPI_MspInit+0xa4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_SPI_MspInit+0xa4>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_SPI_MspInit+0xa4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <HAL_SPI_MspInit+0xa8>)
 80008ec:	f000 fbf4 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000902:	2306      	movs	r3, #6
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <HAL_SPI_MspInit+0xa8>)
 800090e:	f000 fbe3 	bl	80010d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40003c00 	.word	0x40003c00
 8000920:	40021000 	.word	0x40021000
 8000924:	48000800 	.word	0x48000800

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f97c 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART2_IRQHandler+0x10>)
 80009ca:	f002 fa5f 	bl	8002e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000e4 	.word	0x200000e4

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f003 fdbc 	bl	8004584 <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20020000 	.word	0x20020000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	200000e0 	.word	0x200000e0
 8000a40:	200002c0 	.word	0x200002c0

08000a44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <MX_USART2_UART_Init+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000ab2:	f002 f8f3 	bl	8002c9c <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000abc:	f7ff fe9b 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000ac4:	f003 fc6b 	bl	800439e <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f7ff fe92 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000ad6:	f003 fca0 	bl	800441a <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f7ff fe89 	bl	80007f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_USART2_UART_Init+0x90>)
 8000ae6:	f003 fc21 	bl	800432c <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f7ff fe81 	bl	80007f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000e4 	.word	0x200000e4
 8000afc:	40004400 	.word	0x40004400

08000b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09e      	sub	sp, #120	; 0x78
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2254      	movs	r2, #84	; 0x54
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fd27 	bl	8004574 <memset>
  if(uartHandle->Instance==USART2)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <HAL_UART_MspInit+0xb8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d13e      	bne.n	8000bae <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fa3d 	bl	8001fbc <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b48:	f7ff fe55 	bl	80007f6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <HAL_UART_MspInit+0xbc>)
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <HAL_UART_MspInit+0xbc>)
 8000b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b56:	6593      	str	r3, [r2, #88]	; 0x58
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0xbc>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_MspInit+0xbc>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0xbc>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_UART_MspInit+0xbc>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fa9d 	bl	80010d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2026      	movs	r0, #38	; 0x26
 8000ba4:	f000 f9a3 	bl	8000eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba8:	2026      	movs	r0, #38	; 0x26
 8000baa:	f000 f9ba 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3778      	adds	r7, #120	; 0x78
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bea:	f7ff ff2b 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 fccf 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fd89 	bl	8000708 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c04:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000c08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c0c:	200002c0 	.word	0x200002c0

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>

08000c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f95b 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f80e 	bl	8000c44 <HAL_InitTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c34:	f7ff fe78 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	79fb      	ldrb	r3, [r7, #7]

}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_InitTick+0x68>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d022      	beq.n	8000c9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_InitTick+0x68>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f966 	bl	8000f3e <HAL_SYSTICK_Config>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10f      	bne.n	8000c98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d809      	bhi.n	8000c92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295
 8000c86:	f000 f932 	bl	8000eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_InitTick+0x70>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	e007      	b.n	8000ca2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e004      	b.n	8000ca2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	73fb      	strb	r3, [r7, #15]
 8000c9c:	e001      	b.n	8000ca2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000000c 	.word	0x2000000c
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x1c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_IncTick+0x1c>)
 8000cc8:	6013      	str	r3, [r2, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	20000174 	.word	0x20000174
 8000cd8:	2000000c 	.word	0x2000000c

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000174 	.word	0x20000174

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d004      	beq.n	8000d18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_Delay+0x40>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4413      	add	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d18:	bf00      	nop
 8000d1a:	f7ff ffdf 	bl	8000cdc <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d8f7      	bhi.n	8000d1a <HAL_Delay+0x26>
  {
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000000c 	.word	0x2000000c

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff29 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff40 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff90 	bl	8000e2c <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5f 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff33 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa4 	bl	8000e94 <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b085      	sub	sp, #20
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d005      	beq.n	8000f7a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2204      	movs	r2, #4
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e037      	b.n	8000fea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 020e 	bic.w	r2, r2, #14
 8000f88:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f98:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f003 021f 	and.w	r2, r3, #31
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fc6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00c      	beq.n	8000fea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fde:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fe8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d00d      	beq.n	800103c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2204      	movs	r2, #4
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e047      	b.n	80010cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020e 	bic.w	r2, r2, #14
 800104a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800106a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001088:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00c      	beq.n	80010ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	4798      	blx	r3
    }
  }
  return status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010e6:	e15a      	b.n	800139e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 814c 	beq.w	8001398 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 0201 	and.w	r2, r3, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b03      	cmp	r3, #3
 8001184:	d017      	beq.n	80011b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d123      	bne.n	800120a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	6939      	ldr	r1, [r7, #16]
 8001206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0203 	and.w	r2, r3, #3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80a6 	beq.w	8001398 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HAL_GPIO_Init+0x2e4>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <HAL_GPIO_Init+0x2e4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6613      	str	r3, [r2, #96]	; 0x60
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_GPIO_Init+0x2e4>)
 800125a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001264:	4a56      	ldr	r2, [pc, #344]	; (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800128e:	d01f      	beq.n	80012d0 <HAL_GPIO_Init+0x1f8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x2ec>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d019      	beq.n	80012cc <HAL_GPIO_Init+0x1f4>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <HAL_GPIO_Init+0x2f0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d013      	beq.n	80012c8 <HAL_GPIO_Init+0x1f0>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4a      	ldr	r2, [pc, #296]	; (80013cc <HAL_GPIO_Init+0x2f4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d00d      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a49      	ldr	r2, [pc, #292]	; (80013d0 <HAL_GPIO_Init+0x2f8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d007      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <HAL_GPIO_Init+0x2fc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d101      	bne.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012b8:	2305      	movs	r3, #5
 80012ba:	e00a      	b.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012bc:	2306      	movs	r3, #6
 80012be:	e008      	b.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012c0:	2304      	movs	r3, #4
 80012c2:	e006      	b.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012c4:	2303      	movs	r3, #3
 80012c6:	e004      	b.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012d0:	2300      	movs	r3, #0
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e2:	4937      	ldr	r1, [pc, #220]	; (80013c0 <HAL_GPIO_Init+0x2e8>)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_GPIO_Init+0x300>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001314:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <HAL_GPIO_Init+0x300>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_GPIO_Init+0x300>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800133e:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <HAL_GPIO_Init+0x300>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_GPIO_Init+0x300>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_GPIO_Init+0x300>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_GPIO_Init+0x300>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_GPIO_Init+0x300>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f47f ae9d 	bne.w	80010e8 <HAL_GPIO_Init+0x10>
  }
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	48000400 	.word	0x48000400
 80013c8:	48000800 	.word	0x48000800
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	48001000 	.word	0x48001000
 80013d4:	48001400 	.word	0x48001400
 80013d8:	40010400 	.word	0x40010400

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d141      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800141a:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d131      	bne.n	800148c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001428:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800142e:	4a46      	ldr	r2, [pc, #280]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001440:	4a41      	ldr	r2, [pc, #260]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001446:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2232      	movs	r2, #50	; 0x32
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4a3f      	ldr	r2, [pc, #252]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	0c9b      	lsrs	r3, r3, #18
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145e:	e002      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3b01      	subs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001472:	d102      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f2      	bne.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001486:	d158      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e057      	b.n	800153c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001492:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800149c:	e04d      	b.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a4:	d141      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b2:	d131      	bne.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b4:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014cc:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2232      	movs	r2, #50	; 0x32
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ea:	e002      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fe:	d102      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f2      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001512:	d112      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e011      	b.n	800153c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001528:	e007      	b.n	800153a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001538:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40007000 	.word	0x40007000
 800154c:	20000004 	.word	0x20000004
 8001550:	431bde83 	.word	0x431bde83

08001554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e306      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d075      	beq.n	800165e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001572:	4b97      	ldr	r3, [pc, #604]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157c:	4b94      	ldr	r3, [pc, #592]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d102      	bne.n	8001592 <HAL_RCC_OscConfig+0x3e>
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d002      	beq.n	8001598 <HAL_RCC_OscConfig+0x44>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d10b      	bne.n	80015b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d05b      	beq.n	800165c <HAL_RCC_OscConfig+0x108>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d157      	bne.n	800165c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e2e1      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d106      	bne.n	80015c8 <HAL_RCC_OscConfig+0x74>
 80015ba:	4b85      	ldr	r3, [pc, #532]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a84      	ldr	r2, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xb0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x98>
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7b      	ldr	r2, [pc, #492]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xb0>
 80015ec:	4b78      	ldr	r3, [pc, #480]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a74      	ldr	r2, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fb66 	bl	8000cdc <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fb62 	bl	8000cdc <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e2a6      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001626:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xc0>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fb52 	bl	8000cdc <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fb4e 	bl	8000cdc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e292      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164e:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0xe8>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166a:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0x136>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d002      	beq.n	8001690 <HAL_RCC_OscConfig+0x13c>
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d11f      	bne.n	80016d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x154>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e265      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	4946      	ldr	r1, [pc, #280]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <HAL_RCC_OscConfig+0x280>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fabf 	bl	8000c44 <HAL_InitTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d043      	beq.n	8001754 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e251      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a3c      	ldr	r2, [pc, #240]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fafa 	bl	8000cdc <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff faf6 	bl	8000cdc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e23a      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	061b      	lsls	r3, r3, #24
 8001718:	492d      	ldr	r1, [pc, #180]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e01a      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fad6 	bl	8000cdc <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff fad2 	bl	8000cdc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e216      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1e0>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d041      	beq.n	80017e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 800176c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff faaf 	bl	8000cdc <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001782:	f7ff faab 	bl	8000cdc <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1ef      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0ef      	beq.n	8001782 <HAL_RCC_OscConfig+0x22e>
 80017a2:	e020      	b.n	80017e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x27c>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa92 	bl	8000cdc <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ba:	e00d      	b.n	80017d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa8e 	bl	8000cdc <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d906      	bls.n	80017d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1d2      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ea      	bne.n	80017bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80a6 	beq.w	8001940 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017f8:	4b84      	ldr	r3, [pc, #528]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x2b4>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x2b6>
 8001808:	2300      	movs	r3, #0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00d      	beq.n	800182a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a7e      	ldr	r2, [pc, #504]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001826:	2301      	movs	r3, #1
 8001828:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	4b79      	ldr	r3, [pc, #484]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001836:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a75      	ldr	r2, [pc, #468]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7ff fa4b 	bl	8000cdc <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184a:	f7ff fa47 	bl	8000cdc <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e18b      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <HAL_RCC_OscConfig+0x4bc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d108      	bne.n	8001882 <HAL_RCC_OscConfig+0x32e>
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a65      	ldr	r2, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	e024      	b.n	80018cc <HAL_RCC_OscConfig+0x378>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d110      	bne.n	80018ac <HAL_RCC_OscConfig+0x358>
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	4a5a      	ldr	r2, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018aa:	e00f      	b.n	80018cc <HAL_RCC_OscConfig+0x378>
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d016      	beq.n	8001902 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff fa02 	bl	8000cdc <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff f9fe 	bl	8000cdc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e140      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ed      	beq.n	80018dc <HAL_RCC_OscConfig+0x388>
 8001900:	e015      	b.n	800192e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff f9eb 	bl	8000cdc <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f9e7 	bl	8000cdc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e129      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ed      	bne.n	800190a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	4a34      	ldr	r2, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01c      	beq.n	800198e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800195a:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7ff f9ba 	bl	8000cdc <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196c:	f7ff f9b6 	bl	8000cdc <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0fa      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ef      	beq.n	800196c <HAL_RCC_OscConfig+0x418>
 800198c:	e01b      	b.n	80019c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f99d 	bl	8000cdc <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a6:	f7ff f999 	bl	8000cdc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0dd      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ef      	bne.n	80019a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80d1 	beq.w	8001b72 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	f000 808b 	beq.w	8001af4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d15e      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f973 	bl	8000cdc <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e00c      	b.n	8001a14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f96f 	bl	8000cdc <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d905      	bls.n	8001a14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0b3      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1ec      	bne.n	80019fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a20:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6a11      	ldr	r1, [r2, #32]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a30:	3a01      	subs	r2, #1
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	4311      	orrs	r1, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a3a:	0212      	lsls	r2, r2, #8
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a42:	0852      	lsrs	r2, r2, #1
 8001a44:	3a01      	subs	r2, #1
 8001a46:	0552      	lsls	r2, r2, #21
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4e:	0852      	lsrs	r2, r2, #1
 8001a50:	3a01      	subs	r2, #1
 8001a52:	0652      	lsls	r2, r2, #25
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a5a:	06d2      	lsls	r2, r2, #27
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	4947      	ldr	r1, [pc, #284]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a41      	ldr	r2, [pc, #260]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f92e 	bl	8000cdc <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f92a 	bl	8000cdc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e06e      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x530>
 8001aa2:	e066      	b.n	8001b72 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001ac2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f906 	bl	8000cdc <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f902 	bl	8000cdc <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e046      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x580>
 8001af2:	e03e      	b.n	8001b72 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e039      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCC_OscConfig+0x628>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d12c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d123      	bne.n	8001b6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d11b      	bne.n	8001b6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d113      	bne.n	8001b6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	085b      	lsrs	r3, r3, #1
 8001b52:	3b01      	subs	r3, #1
 8001b54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	019f800c 	.word	0x019f800c

08001b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e11e      	b.n	8001dda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b91      	ldr	r3, [pc, #580]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d910      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 020f 	bic.w	r2, r3, #15
 8001bb2:	498c      	ldr	r1, [pc, #560]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b8a      	ldr	r3, [pc, #552]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e106      	b.n	8001dda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d073      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d129      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be0:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0f4      	b.n	8001dda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bf0:	f000 f99e 	bl	8001f30 <RCC_GetSysClockFreqFromPLLSource>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_RCC_ClockConfig+0x268>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d93f      	bls.n	8001c7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bfe:	4b7a      	ldr	r3, [pc, #488]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d033      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d12f      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c26:	4a70      	ldr	r2, [pc, #448]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e024      	b.n	8001c7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0c6      	b.n	8001dda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4c:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0be      	b.n	8001dda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c5c:	f000 f8ce 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4a61      	ldr	r2, [pc, #388]	; (8001dec <HAL_RCC_ClockConfig+0x268>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d909      	bls.n	8001c7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c72:	4a5d      	ldr	r2, [pc, #372]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4957      	ldr	r1, [pc, #348]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c90:	f7ff f824 	bl	8000cdc <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f820 	bl	8000cdc <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e095      	b.n	8001dda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b4e      	ldr	r3, [pc, #312]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001cde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ce2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001cf8:	4a3b      	ldr	r2, [pc, #236]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4936      	ldr	r1, [pc, #216]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d105      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d21d      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 020f 	bic.w	r2, r3, #15
 8001d3c:	4929      	ldr	r1, [pc, #164]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d44:	f7fe ffca 	bl	8000cdc <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7fe ffc6 	bl	8000cdc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e03b      	b.n	8001dda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_ClockConfig+0x260>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1ed      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4917      	ldr	r1, [pc, #92]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	490f      	ldr	r1, [pc, #60]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dae:	f000 f825 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	490c      	ldr	r1, [pc, #48]	; (8001df0 <HAL_RCC_ClockConfig+0x26c>)
 8001dc0:	5ccb      	ldrb	r3, [r1, r3]
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x270>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x274>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff36 	bl	8000c44 <HAL_InitTick>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	04c4b400 	.word	0x04c4b400
 8001df0:	08004ea4 	.word	0x08004ea4
 8001df4:	20000004 	.word	0x20000004
 8001df8:	20000008 	.word	0x20000008

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e047      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d102      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e03e      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d136      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3301      	adds	r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d10c      	bne.n	8001e6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e50:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5a:	68d2      	ldr	r2, [r2, #12]
 8001e5c:	0a12      	lsrs	r2, r2, #8
 8001e5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
      break;
 8001e68:	e00c      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e74:	68d2      	ldr	r2, [r2, #12]
 8001e76:	0a12      	lsrs	r2, r2, #8
 8001e78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
      break;
 8001e82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0e5b      	lsrs	r3, r3, #25
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e001      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ea4:	693b      	ldr	r3, [r7, #16]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004eb4 	.word	0x08004eb4

08001f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f08:	f7ff ffda 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0adb      	lsrs	r3, r3, #11
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4904      	ldr	r1, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08004eb4 	.word	0x08004eb4

08001f30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d10c      	bne.n	8001f6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f54:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f5e:	68d2      	ldr	r2, [r2, #12]
 8001f60:	0a12      	lsrs	r2, r2, #8
 8001f62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	617b      	str	r3, [r7, #20]
    break;
 8001f6c:	e00c      	b.n	8001f88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f78:	68d2      	ldr	r2, [r2, #12]
 8001f7a:	0a12      	lsrs	r2, r2, #8
 8001f7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
    break;
 8001f86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0e5b      	lsrs	r3, r3, #25
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	3301      	adds	r3, #1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fa2:	687b      	ldr	r3, [r7, #4]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	007a1200 	.word	0x007a1200
 8001fb8:	00f42400 	.word	0x00f42400

08001fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fc8:	2300      	movs	r3, #0
 8001fca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8098 	beq.w	800210a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	4a3f      	ldr	r2, [pc, #252]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a39      	ldr	r2, [pc, #228]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002012:	f7fe fe63 	bl	8000cdc <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002018:	e009      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7fe fe5f 	bl	8000cdc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d902      	bls.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	74fb      	strb	r3, [r7, #19]
        break;
 800202c:	e005      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0ef      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800203a:	7cfb      	ldrb	r3, [r7, #19]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d159      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01e      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d019      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002066:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002088:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe fe1f 	bl	8000cdc <HAL_GetTick>
 800209e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a0:	e00b      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fe1b 	bl	8000cdc <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d902      	bls.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	74fb      	strb	r3, [r7, #19]
            break;
 80020b8:	e006      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ec      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10b      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020dc:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020e4:	e008      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020e6:	7cfb      	ldrb	r3, [r7, #19]
 80020e8:	74bb      	strb	r3, [r7, #18]
 80020ea:	e005      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f8:	7c7b      	ldrb	r3, [r7, #17]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4ba7      	ldr	r3, [pc, #668]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	4aa6      	ldr	r2, [pc, #664]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002116:	4ba1      	ldr	r3, [pc, #644]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211c:	f023 0203 	bic.w	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	499d      	ldr	r1, [pc, #628]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002138:	4b98      	ldr	r3, [pc, #608]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 020c 	bic.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4995      	ldr	r1, [pc, #596]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800215a:	4b90      	ldr	r3, [pc, #576]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002160:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	498c      	ldr	r1, [pc, #560]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800217c:	4b87      	ldr	r3, [pc, #540]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	4984      	ldr	r1, [pc, #528]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	497b      	ldr	r1, [pc, #492]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c0:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	4973      	ldr	r1, [pc, #460]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021e2:	4b6e      	ldr	r3, [pc, #440]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	496a      	ldr	r1, [pc, #424]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002204:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4962      	ldr	r1, [pc, #392]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	4959      	ldr	r1, [pc, #356]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002248:	4b54      	ldr	r3, [pc, #336]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	4951      	ldr	r1, [pc, #324]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800226a:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	4948      	ldr	r1, [pc, #288]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4940      	ldr	r1, [pc, #256]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a3a      	ldr	r2, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4932      	ldr	r1, [pc, #200]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e2:	d105      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d015      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	4924      	ldr	r1, [pc, #144]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231a:	d105      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a1e      	ldr	r2, [pc, #120]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002326:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002352:	d105      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d019      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800238a:	d109      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a02      	ldr	r2, [pc, #8]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002396:	60d3      	str	r3, [r2, #12]
 8002398:	e002      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4926      	ldr	r1, [pc, #152]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ca:	d105      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d105      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d015      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800241e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	490a      	ldr	r1, [pc, #40]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800243a:	d105      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002448:	7cbb      	ldrb	r3, [r7, #18]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e09d      	b.n	80025a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800247a:	d009      	beq.n	8002490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
 8002482:	e005      	b.n	8002490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe f9e6 	bl	800087c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024d0:	d902      	bls.n	80024d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e002      	b.n	80024de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80024e6:	d007      	beq.n	80024f8 <HAL_SPI_Init+0xa0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	ea42 0103 	orr.w	r1, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	0c1b      	lsrs	r3, r3, #16
 8002554:	f003 0204 	and.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002574:	ea42 0103 	orr.w	r1, r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08a      	sub	sp, #40	; 0x28
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025bc:	2301      	movs	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x26>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e1fb      	b.n	80029cc <HAL_SPI_TransmitReceive+0x41e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025dc:	f7fe fb7e 	bl	8000cdc <HAL_GetTick>
 80025e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025f8:	7efb      	ldrb	r3, [r7, #27]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d00e      	beq.n	800261c <HAL_SPI_TransmitReceive+0x6e>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002604:	d106      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x66>
 800260e:	7efb      	ldrb	r3, [r7, #27]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d003      	beq.n	800261c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800261a:	e1cd      	b.n	80029b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_SPI_TransmitReceive+0x80>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_SPI_TransmitReceive+0x80>
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002634:	e1c0      	b.n	80029b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b04      	cmp	r3, #4
 8002640:	d003      	beq.n	800264a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	887a      	ldrh	r2, [r7, #2]
 800265a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	887a      	ldrh	r2, [r7, #2]
 8002676:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800268c:	d802      	bhi.n	8002694 <HAL_SPI_TransmitReceive+0xe6>
 800268e:	8a3b      	ldrh	r3, [r7, #16]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d908      	bls.n	80026a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	e007      	b.n	80026b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d007      	beq.n	80026d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026dc:	d97c      	bls.n	80027d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x13e>
 80026e6:	8a7b      	ldrh	r3, [r7, #18]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d169      	bne.n	80027c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	1c9a      	adds	r2, r3, #2
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002710:	e056      	b.n	80027c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d11b      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x1aa>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x1aa>
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	2b01      	cmp	r3, #1
 800272e:	d113      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	1c9a      	adds	r2, r3, #2
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d11c      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0x1f2>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	b292      	uxth	r2, r2
 800277e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	1c9a      	adds	r2, r3, #2
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027a0:	f7fe fa9c 	bl	8000cdc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d807      	bhi.n	80027c0 <HAL_SPI_TransmitReceive+0x212>
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d003      	beq.n	80027c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80027be:	e0fb      	b.n	80029b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1a3      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x164>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d19d      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x164>
 80027d6:	e0df      	b.n	8002998 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x23a>
 80027e0:	8a7b      	ldrh	r3, [r7, #18]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f040 80cb 	bne.w	800297e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d912      	bls.n	8002818 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	1c9a      	adds	r2, r3, #2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b02      	subs	r3, #2
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002816:	e0b2      	b.n	800297e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283e:	e09e      	b.n	800297e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d134      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x30a>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02f      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x30a>
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	2b01      	cmp	r3, #1
 800285c:	d12c      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d912      	bls.n	800288e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b02      	subs	r3, #2
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800288c:	e012      	b.n	80028b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	330c      	adds	r3, #12
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d148      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x3aa>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d042      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d923      	bls.n	8002926 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	b292      	uxth	r2, r2
 80028ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b02      	subs	r3, #2
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d81f      	bhi.n	8002954 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	e016      	b.n	8002954 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f103 020c 	add.w	r2, r3, #12
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002954:	2301      	movs	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002958:	f7fe f9c0 	bl	8000cdc <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002964:	429a      	cmp	r2, r3
 8002966:	d803      	bhi.n	8002970 <HAL_SPI_TransmitReceive+0x3c2>
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d102      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x3c8>
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800297c:	e01c      	b.n	80029b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f af5b 	bne.w	8002840 <HAL_SPI_TransmitReceive+0x292>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f47f af54 	bne.w	8002840 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f937 	bl	8002c10 <SPI_EndRxTxTransaction>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	661a      	str	r2, [r3, #96]	; 0x60
 80029b4:	e000      	b.n	80029b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80029b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029e4:	f7fe f97a 	bl	8000cdc <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029f4:	f7fe f972 	bl	8000cdc <HAL_GetTick>
 80029f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	015b      	lsls	r3, r3, #5
 8002a00:	0d1b      	lsrs	r3, r3, #20
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a0a:	e054      	b.n	8002ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a12:	d050      	beq.n	8002ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a14:	f7fe f962 	bl	8000cdc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d902      	bls.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d13d      	bne.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a42:	d111      	bne.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4c:	d004      	beq.n	8002a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a56:	d107      	bne.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d10f      	bne.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e017      	b.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d19b      	bne.n	8002a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002af6:	f7fe f8f1 	bl	8000cdc <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002b06:	f7fe f8e9 	bl	8000cdc <HAL_GetTick>
 8002b0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b14:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00da      	lsls	r2, r3, #3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	0d1b      	lsrs	r3, r3, #20
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b2c:	e060      	b.n	8002bf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b34:	d107      	bne.n	8002b46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d104      	bne.n	8002b46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d050      	beq.n	8002bf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b4e:	f7fe f8c5 	bl	8000cdc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d902      	bls.n	8002b64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d13d      	bne.n	8002be0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b7c:	d111      	bne.n	8002ba2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b86:	d004      	beq.n	8002b92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b90:	d107      	bne.n	8002ba2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002baa:	d10f      	bne.n	8002bcc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e010      	b.n	8002c02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d196      	bne.n	8002b2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000004 	.word	0x20000004

08002c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7ff ff5b 	bl	8002ae4 <SPI_WaitFifoStateUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e027      	b.n	8002c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff fec0 	bl	80029d4 <SPI_WaitFlagStateUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e014      	b.n	8002c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff ff34 	bl	8002ae4 <SPI_WaitFifoStateUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e000      	b.n	8002c94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e042      	b.n	8002d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fd ff1d 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2224      	movs	r2, #36	; 0x24
 8002cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fc0c 	bl	80034fc <UART_SetConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e022      	b.n	8002d34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fefc 	bl	8003af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 ff83 	bl	8003c38 <UART_CheckIdleState>
 8002d32:	4603      	mov	r3, r0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b091      	sub	sp, #68	; 0x44
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	f040 808c 	bne.w	8002e6e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_UART_Transmit_IT+0x26>
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e084      	b.n	8002e70 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_UART_Transmit_IT+0x38>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e07d      	b.n	8002e70 <HAL_UART_Transmit_IT+0x134>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2221      	movs	r2, #33	; 0x21
 8002da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db0:	d12e      	bne.n	8002e10 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d107      	bne.n	8002dcc <HAL_UART_Transmit_IT+0x90>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a2d      	ldr	r2, [pc, #180]	; (8002e7c <HAL_UART_Transmit_IT+0x140>)
 8002dc8:	675a      	str	r2, [r3, #116]	; 0x74
 8002dca:	e002      	b.n	8002dd2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a2c      	ldr	r2, [pc, #176]	; (8002e80 <HAL_UART_Transmit_IT+0x144>)
 8002dd0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3308      	adds	r3, #8
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3308      	adds	r3, #8
 8002df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfa:	637a      	str	r2, [r7, #52]	; 0x34
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e5      	bne.n	8002dda <HAL_UART_Transmit_IT+0x9e>
 8002e0e:	e02c      	b.n	8002e6a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e18:	d107      	bne.n	8002e2a <HAL_UART_Transmit_IT+0xee>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <HAL_UART_Transmit_IT+0x148>)
 8002e26:	675a      	str	r2, [r3, #116]	; 0x74
 8002e28:	e002      	b.n	8002e30 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HAL_UART_Transmit_IT+0x14c>)
 8002e2e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	613b      	str	r3, [r7, #16]
   return(result);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	69f9      	ldr	r1, [r7, #28]
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e6      	bne.n	8002e38 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3744      	adds	r7, #68	; 0x44
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	080041b1 	.word	0x080041b1
 8002e80:	080040d1 	.word	0x080040d1
 8002e84:	0800400f 	.word	0x0800400f
 8002e88:	08003f57 	.word	0x08003f57

08002e8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0ba      	sub	sp, #232	; 0xe8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002eb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002eba:	4013      	ands	r3, r2
 8002ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ec0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11b      	bne.n	8002f00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d015      	beq.n	8002f00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 82d6 	beq.w	80034a2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
      }
      return;
 8002efe:	e2d0      	b.n	80034a2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 811f 	beq.w	8003148 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	; (800313c <HAL_UART_IRQHandler+0x2b0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f1a:	4b89      	ldr	r3, [pc, #548]	; (8003140 <HAL_UART_IRQHandler+0x2b4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8112 	beq.w	8003148 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d011      	beq.n	8002f54 <HAL_UART_IRQHandler+0xc8>
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d011      	beq.n	8002f84 <HAL_UART_IRQHandler+0xf8>
 8002f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2202      	movs	r2, #2
 8002f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7a:	f043 0204 	orr.w	r2, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x128>
 8002f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002faa:	f043 0202 	orr.w	r2, r3, #2
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d017      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002fcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002fd0:	4b5a      	ldr	r3, [pc, #360]	; (800313c <HAL_UART_IRQHandler+0x2b0>)
 8002fd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe6:	f043 0208 	orr.w	r2, r3, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d012      	beq.n	8003022 <HAL_UART_IRQHandler+0x196>
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 823c 	beq.w	80034a6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d013      	beq.n	8003062 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800303a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003068:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800307a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04f      	beq.n	8003126 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fee9 	bl	8003e5e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d141      	bne.n	800311e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3308      	adds	r3, #8
 80030a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3308      	adds	r3, #8
 80030c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1d9      	bne.n	800309a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d013      	beq.n	8003116 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f2:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_UART_IRQHandler+0x2b8>)
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd ff84 	bl	8001008 <HAL_DMA_Abort_IT>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d017      	beq.n	8003136 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003110:	4610      	mov	r0, r2
 8003112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003114:	e00f      	b.n	8003136 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9da 	bl	80034d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	e00b      	b.n	8003136 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9d6 	bl	80034d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003124:	e007      	b.n	8003136 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9d2 	bl	80034d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003134:	e1b7      	b.n	80034a6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003136:	bf00      	nop
    return;
 8003138:	e1b5      	b.n	80034a6 <HAL_UART_IRQHandler+0x61a>
 800313a:	bf00      	nop
 800313c:	10000001 	.word	0x10000001
 8003140:	04000120 	.word	0x04000120
 8003144:	08003f2b 	.word	0x08003f2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314c:	2b01      	cmp	r3, #1
 800314e:	f040 814a 	bne.w	80033e6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8143 	beq.w	80033e6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 813c 	beq.w	80033e6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2210      	movs	r2, #16
 8003174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	f040 80b5 	bne.w	80032f0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003192:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8187 	beq.w	80034aa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031a6:	429a      	cmp	r2, r3
 80031a8:	f080 817f 	bcs.w	80034aa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f040 8086 	bne.w	80032d4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800320a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1da      	bne.n	80031c8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3308      	adds	r3, #8
 8003218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800323a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800323e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e1      	bne.n	8003212 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3308      	adds	r3, #8
 8003254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800325e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e3      	bne.n	800324e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a4:	f023 0310 	bic.w	r3, r3, #16
 80032a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e4      	bne.n	8003294 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fe41 	bl	8000f56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	4619      	mov	r1, r3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8fb 	bl	80034e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032ee:	e0dc      	b.n	80034aa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80ce 	beq.w	80034ae <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80c9 	beq.w	80034ae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800332a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800333e:	647b      	str	r3, [r7, #68]	; 0x44
 8003340:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800334c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e4      	bne.n	800331c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3308      	adds	r3, #8
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	623b      	str	r3, [r7, #32]
   return(result);
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3308      	adds	r3, #8
 8003376:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800337a:	633a      	str	r2, [r7, #48]	; 0x30
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e1      	bne.n	8003352 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0310 	bic.w	r3, r3, #16
 80033b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	69b9      	ldr	r1, [r7, #24]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	617b      	str	r3, [r7, #20]
   return(result);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e4      	bne.n	80033a2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033dc:	4619      	mov	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f880 	bl	80034e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033e4:	e063      	b.n	80034ae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00e      	beq.n	8003410 <HAL_UART_IRQHandler+0x584>
 80033f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003406:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 ff71 	bl	80042f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800340e:	e051      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d014      	beq.n	8003446 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800342c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03a      	beq.n	80034b2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
    }
    return;
 8003444:	e035      	b.n	80034b2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_UART_IRQHandler+0x5da>
 8003452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 ff1b 	bl	800429a <UART_EndTransmit_IT>
    return;
 8003464:	e026      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_UART_IRQHandler+0x5fa>
 8003472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003476:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 ff4a 	bl	8004318 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003484:	e016      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d010      	beq.n	80034b4 <HAL_UART_IRQHandler+0x628>
 8003492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003496:	2b00      	cmp	r3, #0
 8003498:	da0c      	bge.n	80034b4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 ff32 	bl	8004304 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034a0:	e008      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
      return;
 80034a2:	bf00      	nop
 80034a4:	e006      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
    return;
 80034a6:	bf00      	nop
 80034a8:	e004      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
      return;
 80034aa:	bf00      	nop
 80034ac:	e002      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
      return;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_UART_IRQHandler+0x628>
    return;
 80034b2:	bf00      	nop
  }
}
 80034b4:	37e8      	adds	r7, #232	; 0xe8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop

080034bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003500:	b08c      	sub	sp, #48	; 0x30
 8003502:	af00      	add	r7, sp, #0
 8003504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	431a      	orrs	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	431a      	orrs	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4313      	orrs	r3, r2
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4baa      	ldr	r3, [pc, #680]	; (80037d4 <UART_SetConfig+0x2d8>)
 800352c:	4013      	ands	r3, r2
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003534:	430b      	orrs	r3, r1
 8003536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a9f      	ldr	r2, [pc, #636]	; (80037d8 <UART_SetConfig+0x2dc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003564:	4313      	orrs	r3, r2
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003572:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800357c:	430b      	orrs	r3, r1
 800357e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f023 010f 	bic.w	r1, r3, #15
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a90      	ldr	r2, [pc, #576]	; (80037dc <UART_SetConfig+0x2e0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d125      	bne.n	80035ec <UART_SetConfig+0xf0>
 80035a0:	4b8f      	ldr	r3, [pc, #572]	; (80037e0 <UART_SetConfig+0x2e4>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d81a      	bhi.n	80035e4 <UART_SetConfig+0xe8>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0xb8>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035d5 	.word	0x080035d5
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035dd 	.word	0x080035dd
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ca:	e116      	b.n	80037fa <UART_SetConfig+0x2fe>
 80035cc:	2302      	movs	r3, #2
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d2:	e112      	b.n	80037fa <UART_SetConfig+0x2fe>
 80035d4:	2304      	movs	r3, #4
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035da:	e10e      	b.n	80037fa <UART_SetConfig+0x2fe>
 80035dc:	2308      	movs	r3, #8
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e2:	e10a      	b.n	80037fa <UART_SetConfig+0x2fe>
 80035e4:	2310      	movs	r3, #16
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ea:	e106      	b.n	80037fa <UART_SetConfig+0x2fe>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7c      	ldr	r2, [pc, #496]	; (80037e4 <UART_SetConfig+0x2e8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d138      	bne.n	8003668 <UART_SetConfig+0x16c>
 80035f6:	4b7a      	ldr	r3, [pc, #488]	; (80037e0 <UART_SetConfig+0x2e4>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d82d      	bhi.n	8003660 <UART_SetConfig+0x164>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0x110>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	08003641 	.word	0x08003641
 8003610:	08003661 	.word	0x08003661
 8003614:	08003661 	.word	0x08003661
 8003618:	08003661 	.word	0x08003661
 800361c:	08003651 	.word	0x08003651
 8003620:	08003661 	.word	0x08003661
 8003624:	08003661 	.word	0x08003661
 8003628:	08003661 	.word	0x08003661
 800362c:	08003649 	.word	0x08003649
 8003630:	08003661 	.word	0x08003661
 8003634:	08003661 	.word	0x08003661
 8003638:	08003661 	.word	0x08003661
 800363c:	08003659 	.word	0x08003659
 8003640:	2300      	movs	r3, #0
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003646:	e0d8      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003648:	2302      	movs	r3, #2
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e0d4      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003650:	2304      	movs	r3, #4
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003656:	e0d0      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003658:	2308      	movs	r3, #8
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365e:	e0cc      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003660:	2310      	movs	r3, #16
 8003662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003666:	e0c8      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a5e      	ldr	r2, [pc, #376]	; (80037e8 <UART_SetConfig+0x2ec>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d125      	bne.n	80036be <UART_SetConfig+0x1c2>
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <UART_SetConfig+0x2e4>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800367c:	2b30      	cmp	r3, #48	; 0x30
 800367e:	d016      	beq.n	80036ae <UART_SetConfig+0x1b2>
 8003680:	2b30      	cmp	r3, #48	; 0x30
 8003682:	d818      	bhi.n	80036b6 <UART_SetConfig+0x1ba>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d00a      	beq.n	800369e <UART_SetConfig+0x1a2>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d814      	bhi.n	80036b6 <UART_SetConfig+0x1ba>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <UART_SetConfig+0x19a>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d008      	beq.n	80036a6 <UART_SetConfig+0x1aa>
 8003694:	e00f      	b.n	80036b6 <UART_SetConfig+0x1ba>
 8003696:	2300      	movs	r3, #0
 8003698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369c:	e0ad      	b.n	80037fa <UART_SetConfig+0x2fe>
 800369e:	2302      	movs	r3, #2
 80036a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a4:	e0a9      	b.n	80037fa <UART_SetConfig+0x2fe>
 80036a6:	2304      	movs	r3, #4
 80036a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ac:	e0a5      	b.n	80037fa <UART_SetConfig+0x2fe>
 80036ae:	2308      	movs	r3, #8
 80036b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b4:	e0a1      	b.n	80037fa <UART_SetConfig+0x2fe>
 80036b6:	2310      	movs	r3, #16
 80036b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036bc:	e09d      	b.n	80037fa <UART_SetConfig+0x2fe>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4a      	ldr	r2, [pc, #296]	; (80037ec <UART_SetConfig+0x2f0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d125      	bne.n	8003714 <UART_SetConfig+0x218>
 80036c8:	4b45      	ldr	r3, [pc, #276]	; (80037e0 <UART_SetConfig+0x2e4>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036d2:	2bc0      	cmp	r3, #192	; 0xc0
 80036d4:	d016      	beq.n	8003704 <UART_SetConfig+0x208>
 80036d6:	2bc0      	cmp	r3, #192	; 0xc0
 80036d8:	d818      	bhi.n	800370c <UART_SetConfig+0x210>
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	d00a      	beq.n	80036f4 <UART_SetConfig+0x1f8>
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d814      	bhi.n	800370c <UART_SetConfig+0x210>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <UART_SetConfig+0x1f0>
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d008      	beq.n	80036fc <UART_SetConfig+0x200>
 80036ea:	e00f      	b.n	800370c <UART_SetConfig+0x210>
 80036ec:	2300      	movs	r3, #0
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036f2:	e082      	b.n	80037fa <UART_SetConfig+0x2fe>
 80036f4:	2302      	movs	r3, #2
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036fa:	e07e      	b.n	80037fa <UART_SetConfig+0x2fe>
 80036fc:	2304      	movs	r3, #4
 80036fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003702:	e07a      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003704:	2308      	movs	r3, #8
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800370a:	e076      	b.n	80037fa <UART_SetConfig+0x2fe>
 800370c:	2310      	movs	r3, #16
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003712:	e072      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a35      	ldr	r2, [pc, #212]	; (80037f0 <UART_SetConfig+0x2f4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d12a      	bne.n	8003774 <UART_SetConfig+0x278>
 800371e:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <UART_SetConfig+0x2e4>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372c:	d01a      	beq.n	8003764 <UART_SetConfig+0x268>
 800372e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003732:	d81b      	bhi.n	800376c <UART_SetConfig+0x270>
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d00c      	beq.n	8003754 <UART_SetConfig+0x258>
 800373a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373e:	d815      	bhi.n	800376c <UART_SetConfig+0x270>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <UART_SetConfig+0x250>
 8003744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003748:	d008      	beq.n	800375c <UART_SetConfig+0x260>
 800374a:	e00f      	b.n	800376c <UART_SetConfig+0x270>
 800374c:	2300      	movs	r3, #0
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003752:	e052      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003754:	2302      	movs	r3, #2
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800375a:	e04e      	b.n	80037fa <UART_SetConfig+0x2fe>
 800375c:	2304      	movs	r3, #4
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003762:	e04a      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003764:	2308      	movs	r3, #8
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800376a:	e046      	b.n	80037fa <UART_SetConfig+0x2fe>
 800376c:	2310      	movs	r3, #16
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003772:	e042      	b.n	80037fa <UART_SetConfig+0x2fe>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <UART_SetConfig+0x2dc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d13a      	bne.n	80037f4 <UART_SetConfig+0x2f8>
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <UART_SetConfig+0x2e4>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800378c:	d01a      	beq.n	80037c4 <UART_SetConfig+0x2c8>
 800378e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003792:	d81b      	bhi.n	80037cc <UART_SetConfig+0x2d0>
 8003794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003798:	d00c      	beq.n	80037b4 <UART_SetConfig+0x2b8>
 800379a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379e:	d815      	bhi.n	80037cc <UART_SetConfig+0x2d0>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <UART_SetConfig+0x2b0>
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d008      	beq.n	80037bc <UART_SetConfig+0x2c0>
 80037aa:	e00f      	b.n	80037cc <UART_SetConfig+0x2d0>
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037b2:	e022      	b.n	80037fa <UART_SetConfig+0x2fe>
 80037b4:	2302      	movs	r3, #2
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ba:	e01e      	b.n	80037fa <UART_SetConfig+0x2fe>
 80037bc:	2304      	movs	r3, #4
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c2:	e01a      	b.n	80037fa <UART_SetConfig+0x2fe>
 80037c4:	2308      	movs	r3, #8
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ca:	e016      	b.n	80037fa <UART_SetConfig+0x2fe>
 80037cc:	2310      	movs	r3, #16
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037d2:	e012      	b.n	80037fa <UART_SetConfig+0x2fe>
 80037d4:	cfff69f3 	.word	0xcfff69f3
 80037d8:	40008000 	.word	0x40008000
 80037dc:	40013800 	.word	0x40013800
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40004400 	.word	0x40004400
 80037e8:	40004800 	.word	0x40004800
 80037ec:	40004c00 	.word	0x40004c00
 80037f0:	40005000 	.word	0x40005000
 80037f4:	2310      	movs	r3, #16
 80037f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4aae      	ldr	r2, [pc, #696]	; (8003ab8 <UART_SetConfig+0x5bc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	f040 8097 	bne.w	8003934 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800380a:	2b08      	cmp	r3, #8
 800380c:	d823      	bhi.n	8003856 <UART_SetConfig+0x35a>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0x318>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003839 	.word	0x08003839
 8003818:	08003857 	.word	0x08003857
 800381c:	08003841 	.word	0x08003841
 8003820:	08003857 	.word	0x08003857
 8003824:	08003847 	.word	0x08003847
 8003828:	08003857 	.word	0x08003857
 800382c:	08003857 	.word	0x08003857
 8003830:	08003857 	.word	0x08003857
 8003834:	0800384f 	.word	0x0800384f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7fe fb4e 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 800383c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800383e:	e010      	b.n	8003862 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003840:	4b9e      	ldr	r3, [pc, #632]	; (8003abc <UART_SetConfig+0x5c0>)
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003844:	e00d      	b.n	8003862 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7fe fad9 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800384c:	e009      	b.n	8003862 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003854:	e005      	b.n	8003862 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8130 	beq.w	8003aca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	4a94      	ldr	r2, [pc, #592]	; (8003ac0 <UART_SetConfig+0x5c4>)
 8003870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003874:	461a      	mov	r2, r3
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	fbb3 f3f2 	udiv	r3, r3, r2
 800387c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	429a      	cmp	r2, r3
 800388c:	d305      	bcc.n	800389a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	429a      	cmp	r2, r3
 8003898:	d903      	bls.n	80038a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038a0:	e113      	b.n	8003aca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	2200      	movs	r2, #0
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	60fa      	str	r2, [r7, #12]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	4a84      	ldr	r2, [pc, #528]	; (8003ac0 <UART_SetConfig+0x5c4>)
 80038b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2200      	movs	r2, #0
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038c4:	f7fc fcfc 	bl	80002c0 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	020b      	lsls	r3, r1, #8
 80038da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038de:	0202      	lsls	r2, r0, #8
 80038e0:	6979      	ldr	r1, [r7, #20]
 80038e2:	6849      	ldr	r1, [r1, #4]
 80038e4:	0849      	lsrs	r1, r1, #1
 80038e6:	2000      	movs	r0, #0
 80038e8:	460c      	mov	r4, r1
 80038ea:	4605      	mov	r5, r0
 80038ec:	eb12 0804 	adds.w	r8, r2, r4
 80038f0:	eb43 0905 	adc.w	r9, r3, r5
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	469a      	mov	sl, r3
 80038fc:	4693      	mov	fp, r2
 80038fe:	4652      	mov	r2, sl
 8003900:	465b      	mov	r3, fp
 8003902:	4640      	mov	r0, r8
 8003904:	4649      	mov	r1, r9
 8003906:	f7fc fcdb 	bl	80002c0 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4613      	mov	r3, r2
 8003910:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003918:	d308      	bcc.n	800392c <UART_SetConfig+0x430>
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003920:	d204      	bcs.n	800392c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a3a      	ldr	r2, [r7, #32]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	e0ce      	b.n	8003aca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003932:	e0ca      	b.n	8003aca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	d166      	bne.n	8003a0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800393e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003942:	2b08      	cmp	r3, #8
 8003944:	d827      	bhi.n	8003996 <UART_SetConfig+0x49a>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0x450>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	08003971 	.word	0x08003971
 8003950:	08003979 	.word	0x08003979
 8003954:	08003981 	.word	0x08003981
 8003958:	08003997 	.word	0x08003997
 800395c:	08003987 	.word	0x08003987
 8003960:	08003997 	.word	0x08003997
 8003964:	08003997 	.word	0x08003997
 8003968:	08003997 	.word	0x08003997
 800396c:	0800398f 	.word	0x0800398f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003970:	f7fe fab2 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8003974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003976:	e014      	b.n	80039a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7fe fac4 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800397e:	e010      	b.n	80039a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003980:	4b4e      	ldr	r3, [pc, #312]	; (8003abc <UART_SetConfig+0x5c0>)
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003984:	e00d      	b.n	80039a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003986:	f7fe fa39 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 800398a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800398c:	e009      	b.n	80039a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003994:	e005      	b.n	80039a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8090 	beq.w	8003aca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	4a44      	ldr	r2, [pc, #272]	; (8003ac0 <UART_SetConfig+0x5c4>)
 80039b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80039bc:	005a      	lsls	r2, r3, #1
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	441a      	add	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	d916      	bls.n	8003a04 <UART_SetConfig+0x508>
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d212      	bcs.n	8003a04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f023 030f 	bic.w	r3, r3, #15
 80039e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	8bfb      	ldrh	r3, [r7, #30]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	8bfa      	ldrh	r2, [r7, #30]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e062      	b.n	8003aca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a0a:	e05e      	b.n	8003aca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d828      	bhi.n	8003a66 <UART_SetConfig+0x56a>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <UART_SetConfig+0x520>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a49 	.word	0x08003a49
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003a67 	.word	0x08003a67
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	08003a67 	.word	0x08003a67
 8003a34:	08003a67 	.word	0x08003a67
 8003a38:	08003a67 	.word	0x08003a67
 8003a3c:	08003a5f 	.word	0x08003a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a40:	f7fe fa4a 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8003a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a46:	e014      	b.n	8003a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a48:	f7fe fa5c 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a4e:	e010      	b.n	8003a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <UART_SetConfig+0x5c0>)
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a54:	e00d      	b.n	8003a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a56:	f7fe f9d1 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8003a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a5c:	e009      	b.n	8003a72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a64:	e005      	b.n	8003a72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a70:	bf00      	nop
    }

    if (pclk != 0U)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d028      	beq.n	8003aca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	4a10      	ldr	r2, [pc, #64]	; (8003ac0 <UART_SetConfig+0x5c4>)
 8003a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	441a      	add	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	d910      	bls.n	8003ac4 <UART_SetConfig+0x5c8>
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d20c      	bcs.n	8003ac4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	e009      	b.n	8003aca <UART_SetConfig+0x5ce>
 8003ab6:	bf00      	nop
 8003ab8:	40008000 	.word	0x40008000
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	08004ebc 	.word	0x08004ebc
      }
      else
      {
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003ae6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3730      	adds	r7, #48	; 0x30
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01a      	beq.n	8003c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf2:	d10a      	bne.n	8003c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c48:	f7fd f848 	bl	8000cdc <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d10e      	bne.n	8003c7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f82f 	bl	8003cce <UART_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e025      	b.n	8003cc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d10e      	bne.n	8003ca6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f819 	bl	8003cce <UART_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e00f      	b.n	8003cc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b09c      	sub	sp, #112	; 0x70
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	603b      	str	r3, [r7, #0]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	e0a9      	b.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	f000 80a5 	beq.w	8003e34 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fc fff7 	bl	8000cdc <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d140      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d14:	667b      	str	r3, [r7, #100]	; 0x64
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	663b      	str	r3, [r7, #96]	; 0x60
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e069      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d051      	beq.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9e:	d149      	bne.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e6      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	613b      	str	r3, [r7, #16]
   return(result);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dfc:	623a      	str	r2, [r7, #32]
 8003dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	69f9      	ldr	r1, [r7, #28]
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e010      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f43f af46 	beq.w	8003ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3770      	adds	r7, #112	; 0x70
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b095      	sub	sp, #84	; 0x54
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e84:	643b      	str	r3, [r7, #64]	; 0x40
 8003e86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e6      	bne.n	8003e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d118      	bne.n	8003f0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 0310 	bic.w	r3, r3, #16
 8003eec:	647b      	str	r3, [r7, #68]	; 0x44
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6979      	ldr	r1, [r7, #20]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	613b      	str	r3, [r7, #16]
   return(result);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e6      	bne.n	8003ed8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003f1e:	bf00      	nop
 8003f20:	3754      	adds	r7, #84	; 0x54
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff fac1 	bl	80034d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b08f      	sub	sp, #60	; 0x3c
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f64:	2b21      	cmp	r3, #33	; 0x21
 8003f66:	d14c      	bne.n	8004002 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d132      	bne.n	8003fda <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f88:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f94:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e6      	bne.n	8003f74 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003fd8:	e013      	b.n	8004002 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fde:	781a      	ldrb	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004002:	bf00      	nop
 8004004:	373c      	adds	r7, #60	; 0x3c
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800400e:	b480      	push	{r7}
 8004010:	b091      	sub	sp, #68	; 0x44
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401c:	2b21      	cmp	r3, #33	; 0x21
 800401e:	d151      	bne.n	80040c4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d132      	bne.n	8004092 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	623b      	str	r3, [r7, #32]
   return(result);
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
 800404c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e6      	bne.n	800402c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60fb      	str	r3, [r7, #12]
   return(result);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	617b      	str	r3, [r7, #20]
   return(result);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e6      	bne.n	800405e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004090:	e018      	b.n	80040c4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80040c4:	bf00      	nop
 80040c6:	3744      	adds	r7, #68	; 0x44
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b091      	sub	sp, #68	; 0x44
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040de:	2b21      	cmp	r3, #33	; 0x21
 80040e0:	d160      	bne.n	80041a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80040e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80040ea:	e057      	b.n	800419c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d133      	bne.n	8004160 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	623b      	str	r3, [r7, #32]
   return(result);
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004118:	633a      	str	r2, [r7, #48]	; 0x30
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	60fb      	str	r3, [r7, #12]
   return(result);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	617b      	str	r3, [r7, #20]
   return(result);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800415e:	e021      	b.n	80041a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004196:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004198:	3b01      	subs	r3, #1
 800419a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800419c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1a4      	bne.n	80040ec <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80041a2:	e7ff      	b.n	80041a4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80041a4:	bf00      	nop
 80041a6:	3744      	adds	r7, #68	; 0x44
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b091      	sub	sp, #68	; 0x44
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041be:	2b21      	cmp	r3, #33	; 0x21
 80041c0:	d165      	bne.n	800428e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80041c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80041ca:	e05c      	b.n	8004286 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d133      	bne.n	8004240 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3308      	adds	r3, #8
 80041f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	60bb      	str	r3, [r7, #8]
   return(result);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	61bb      	str	r3, [r7, #24]
 800422c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	613b      	str	r3, [r7, #16]
   return(result);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e6      	bne.n	800420c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800423e:	e026      	b.n	800428e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	1c9a      	adds	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004280:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004282:	3b01      	subs	r3, #1
 8004284:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004286:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004288:	2b00      	cmp	r3, #0
 800428a:	d19f      	bne.n	80041cc <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800428c:	e7ff      	b.n	800428e <UART_TxISR_16BIT_FIFOEN+0xde>
 800428e:	bf00      	nop
 8004290:	3744      	adds	r7, #68	; 0x44
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b088      	sub	sp, #32
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6979      	ldr	r1, [r7, #20]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	613b      	str	r3, [r7, #16]
   return(result);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff f8ea 	bl	80034bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e8:	bf00      	nop
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_UARTEx_DisableFifoMode+0x16>
 800433e:	2302      	movs	r3, #2
 8004340:	e027      	b.n	8004392 <HAL_UARTEx_DisableFifoMode+0x66>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2224      	movs	r2, #36	; 0x24
 800434e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0201 	bic.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e02d      	b.n	8004412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2224      	movs	r2, #36	; 0x24
 80043c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f850 	bl	8004498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800442e:	2302      	movs	r3, #2
 8004430:	e02d      	b.n	800448e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2224      	movs	r2, #36	; 0x24
 800443e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f812 	bl	8004498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d108      	bne.n	80044ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044b8:	e031      	b.n	800451e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044ba:	2308      	movs	r3, #8
 80044bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044be:	2308      	movs	r3, #8
 80044c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	0e5b      	lsrs	r3, r3, #25
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	0f5b      	lsrs	r3, r3, #29
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044e2:	7bbb      	ldrb	r3, [r7, #14]
 80044e4:	7b3a      	ldrb	r2, [r7, #12]
 80044e6:	4911      	ldr	r1, [pc, #68]	; (800452c <UARTEx_SetNbDataToProcess+0x94>)
 80044e8:	5c8a      	ldrb	r2, [r1, r2]
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044ee:	7b3a      	ldrb	r2, [r7, #12]
 80044f0:	490f      	ldr	r1, [pc, #60]	; (8004530 <UARTEx_SetNbDataToProcess+0x98>)
 80044f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	7b7a      	ldrb	r2, [r7, #13]
 8004504:	4909      	ldr	r1, [pc, #36]	; (800452c <UARTEx_SetNbDataToProcess+0x94>)
 8004506:	5c8a      	ldrb	r2, [r1, r2]
 8004508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800450c:	7b7a      	ldrb	r2, [r7, #13]
 800450e:	4908      	ldr	r1, [pc, #32]	; (8004530 <UARTEx_SetNbDataToProcess+0x98>)
 8004510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004512:	fb93 f3f2 	sdiv	r3, r3, r2
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	08004ed4 	.word	0x08004ed4
 8004530:	08004edc 	.word	0x08004edc

08004534 <siprintf>:
 8004534:	b40e      	push	{r1, r2, r3}
 8004536:	b500      	push	{lr}
 8004538:	b09c      	sub	sp, #112	; 0x70
 800453a:	ab1d      	add	r3, sp, #116	; 0x74
 800453c:	9002      	str	r0, [sp, #8]
 800453e:	9006      	str	r0, [sp, #24]
 8004540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004544:	4809      	ldr	r0, [pc, #36]	; (800456c <siprintf+0x38>)
 8004546:	9107      	str	r1, [sp, #28]
 8004548:	9104      	str	r1, [sp, #16]
 800454a:	4909      	ldr	r1, [pc, #36]	; (8004570 <siprintf+0x3c>)
 800454c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004550:	9105      	str	r1, [sp, #20]
 8004552:	6800      	ldr	r0, [r0, #0]
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	a902      	add	r1, sp, #8
 8004558:	f000 f992 	bl	8004880 <_svfiprintf_r>
 800455c:	9b02      	ldr	r3, [sp, #8]
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	b01c      	add	sp, #112	; 0x70
 8004564:	f85d eb04 	ldr.w	lr, [sp], #4
 8004568:	b003      	add	sp, #12
 800456a:	4770      	bx	lr
 800456c:	2000005c 	.word	0x2000005c
 8004570:	ffff0208 	.word	0xffff0208

08004574 <memset>:
 8004574:	4402      	add	r2, r0
 8004576:	4603      	mov	r3, r0
 8004578:	4293      	cmp	r3, r2
 800457a:	d100      	bne.n	800457e <memset+0xa>
 800457c:	4770      	bx	lr
 800457e:	f803 1b01 	strb.w	r1, [r3], #1
 8004582:	e7f9      	b.n	8004578 <memset+0x4>

08004584 <__errno>:
 8004584:	4b01      	ldr	r3, [pc, #4]	; (800458c <__errno+0x8>)
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	2000005c 	.word	0x2000005c

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4d0d      	ldr	r5, [pc, #52]	; (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	; (80045cc <__libc_init_array+0x3c>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2600      	movs	r6, #0
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4d0b      	ldr	r5, [pc, #44]	; (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	; (80045d4 <__libc_init_array+0x44>)
 80045a4:	f000 fc6a 	bl	8004e7c <_init>
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2600      	movs	r6, #0
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	08004f20 	.word	0x08004f20
 80045cc:	08004f20 	.word	0x08004f20
 80045d0:	08004f20 	.word	0x08004f20
 80045d4:	08004f24 	.word	0x08004f24

080045d8 <__retarget_lock_acquire_recursive>:
 80045d8:	4770      	bx	lr

080045da <__retarget_lock_release_recursive>:
 80045da:	4770      	bx	lr

080045dc <_free_r>:
 80045dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045de:	2900      	cmp	r1, #0
 80045e0:	d044      	beq.n	800466c <_free_r+0x90>
 80045e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e6:	9001      	str	r0, [sp, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f1a1 0404 	sub.w	r4, r1, #4
 80045ee:	bfb8      	it	lt
 80045f0:	18e4      	addlt	r4, r4, r3
 80045f2:	f000 f8df 	bl	80047b4 <__malloc_lock>
 80045f6:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <_free_r+0x94>)
 80045f8:	9801      	ldr	r0, [sp, #4]
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	b933      	cbnz	r3, 800460c <_free_r+0x30>
 80045fe:	6063      	str	r3, [r4, #4]
 8004600:	6014      	str	r4, [r2, #0]
 8004602:	b003      	add	sp, #12
 8004604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004608:	f000 b8da 	b.w	80047c0 <__malloc_unlock>
 800460c:	42a3      	cmp	r3, r4
 800460e:	d908      	bls.n	8004622 <_free_r+0x46>
 8004610:	6825      	ldr	r5, [r4, #0]
 8004612:	1961      	adds	r1, r4, r5
 8004614:	428b      	cmp	r3, r1
 8004616:	bf01      	itttt	eq
 8004618:	6819      	ldreq	r1, [r3, #0]
 800461a:	685b      	ldreq	r3, [r3, #4]
 800461c:	1949      	addeq	r1, r1, r5
 800461e:	6021      	streq	r1, [r4, #0]
 8004620:	e7ed      	b.n	80045fe <_free_r+0x22>
 8004622:	461a      	mov	r2, r3
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b10b      	cbz	r3, 800462c <_free_r+0x50>
 8004628:	42a3      	cmp	r3, r4
 800462a:	d9fa      	bls.n	8004622 <_free_r+0x46>
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	1855      	adds	r5, r2, r1
 8004630:	42a5      	cmp	r5, r4
 8004632:	d10b      	bne.n	800464c <_free_r+0x70>
 8004634:	6824      	ldr	r4, [r4, #0]
 8004636:	4421      	add	r1, r4
 8004638:	1854      	adds	r4, r2, r1
 800463a:	42a3      	cmp	r3, r4
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	d1e0      	bne.n	8004602 <_free_r+0x26>
 8004640:	681c      	ldr	r4, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	6053      	str	r3, [r2, #4]
 8004646:	440c      	add	r4, r1
 8004648:	6014      	str	r4, [r2, #0]
 800464a:	e7da      	b.n	8004602 <_free_r+0x26>
 800464c:	d902      	bls.n	8004654 <_free_r+0x78>
 800464e:	230c      	movs	r3, #12
 8004650:	6003      	str	r3, [r0, #0]
 8004652:	e7d6      	b.n	8004602 <_free_r+0x26>
 8004654:	6825      	ldr	r5, [r4, #0]
 8004656:	1961      	adds	r1, r4, r5
 8004658:	428b      	cmp	r3, r1
 800465a:	bf04      	itt	eq
 800465c:	6819      	ldreq	r1, [r3, #0]
 800465e:	685b      	ldreq	r3, [r3, #4]
 8004660:	6063      	str	r3, [r4, #4]
 8004662:	bf04      	itt	eq
 8004664:	1949      	addeq	r1, r1, r5
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	6054      	str	r4, [r2, #4]
 800466a:	e7ca      	b.n	8004602 <_free_r+0x26>
 800466c:	b003      	add	sp, #12
 800466e:	bd30      	pop	{r4, r5, pc}
 8004670:	200002b8 	.word	0x200002b8

08004674 <sbrk_aligned>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4e0e      	ldr	r6, [pc, #56]	; (80046b0 <sbrk_aligned+0x3c>)
 8004678:	460c      	mov	r4, r1
 800467a:	6831      	ldr	r1, [r6, #0]
 800467c:	4605      	mov	r5, r0
 800467e:	b911      	cbnz	r1, 8004686 <sbrk_aligned+0x12>
 8004680:	f000 fba6 	bl	8004dd0 <_sbrk_r>
 8004684:	6030      	str	r0, [r6, #0]
 8004686:	4621      	mov	r1, r4
 8004688:	4628      	mov	r0, r5
 800468a:	f000 fba1 	bl	8004dd0 <_sbrk_r>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	d00a      	beq.n	80046a8 <sbrk_aligned+0x34>
 8004692:	1cc4      	adds	r4, r0, #3
 8004694:	f024 0403 	bic.w	r4, r4, #3
 8004698:	42a0      	cmp	r0, r4
 800469a:	d007      	beq.n	80046ac <sbrk_aligned+0x38>
 800469c:	1a21      	subs	r1, r4, r0
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 fb96 	bl	8004dd0 <_sbrk_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d101      	bne.n	80046ac <sbrk_aligned+0x38>
 80046a8:	f04f 34ff 	mov.w	r4, #4294967295
 80046ac:	4620      	mov	r0, r4
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	200002bc 	.word	0x200002bc

080046b4 <_malloc_r>:
 80046b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b8:	1ccd      	adds	r5, r1, #3
 80046ba:	f025 0503 	bic.w	r5, r5, #3
 80046be:	3508      	adds	r5, #8
 80046c0:	2d0c      	cmp	r5, #12
 80046c2:	bf38      	it	cc
 80046c4:	250c      	movcc	r5, #12
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	4607      	mov	r7, r0
 80046ca:	db01      	blt.n	80046d0 <_malloc_r+0x1c>
 80046cc:	42a9      	cmp	r1, r5
 80046ce:	d905      	bls.n	80046dc <_malloc_r+0x28>
 80046d0:	230c      	movs	r3, #12
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	2600      	movs	r6, #0
 80046d6:	4630      	mov	r0, r6
 80046d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047b0 <_malloc_r+0xfc>
 80046e0:	f000 f868 	bl	80047b4 <__malloc_lock>
 80046e4:	f8d8 3000 	ldr.w	r3, [r8]
 80046e8:	461c      	mov	r4, r3
 80046ea:	bb5c      	cbnz	r4, 8004744 <_malloc_r+0x90>
 80046ec:	4629      	mov	r1, r5
 80046ee:	4638      	mov	r0, r7
 80046f0:	f7ff ffc0 	bl	8004674 <sbrk_aligned>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	4604      	mov	r4, r0
 80046f8:	d155      	bne.n	80047a6 <_malloc_r+0xf2>
 80046fa:	f8d8 4000 	ldr.w	r4, [r8]
 80046fe:	4626      	mov	r6, r4
 8004700:	2e00      	cmp	r6, #0
 8004702:	d145      	bne.n	8004790 <_malloc_r+0xdc>
 8004704:	2c00      	cmp	r4, #0
 8004706:	d048      	beq.n	800479a <_malloc_r+0xe6>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	4631      	mov	r1, r6
 800470c:	4638      	mov	r0, r7
 800470e:	eb04 0903 	add.w	r9, r4, r3
 8004712:	f000 fb5d 	bl	8004dd0 <_sbrk_r>
 8004716:	4581      	cmp	r9, r0
 8004718:	d13f      	bne.n	800479a <_malloc_r+0xe6>
 800471a:	6821      	ldr	r1, [r4, #0]
 800471c:	1a6d      	subs	r5, r5, r1
 800471e:	4629      	mov	r1, r5
 8004720:	4638      	mov	r0, r7
 8004722:	f7ff ffa7 	bl	8004674 <sbrk_aligned>
 8004726:	3001      	adds	r0, #1
 8004728:	d037      	beq.n	800479a <_malloc_r+0xe6>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	442b      	add	r3, r5
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	f8d8 3000 	ldr.w	r3, [r8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d038      	beq.n	80047aa <_malloc_r+0xf6>
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	42a2      	cmp	r2, r4
 800473c:	d12b      	bne.n	8004796 <_malloc_r+0xe2>
 800473e:	2200      	movs	r2, #0
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	e00f      	b.n	8004764 <_malloc_r+0xb0>
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	1b52      	subs	r2, r2, r5
 8004748:	d41f      	bmi.n	800478a <_malloc_r+0xd6>
 800474a:	2a0b      	cmp	r2, #11
 800474c:	d917      	bls.n	800477e <_malloc_r+0xca>
 800474e:	1961      	adds	r1, r4, r5
 8004750:	42a3      	cmp	r3, r4
 8004752:	6025      	str	r5, [r4, #0]
 8004754:	bf18      	it	ne
 8004756:	6059      	strne	r1, [r3, #4]
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	bf08      	it	eq
 800475c:	f8c8 1000 	streq.w	r1, [r8]
 8004760:	5162      	str	r2, [r4, r5]
 8004762:	604b      	str	r3, [r1, #4]
 8004764:	4638      	mov	r0, r7
 8004766:	f104 060b 	add.w	r6, r4, #11
 800476a:	f000 f829 	bl	80047c0 <__malloc_unlock>
 800476e:	f026 0607 	bic.w	r6, r6, #7
 8004772:	1d23      	adds	r3, r4, #4
 8004774:	1af2      	subs	r2, r6, r3
 8004776:	d0ae      	beq.n	80046d6 <_malloc_r+0x22>
 8004778:	1b9b      	subs	r3, r3, r6
 800477a:	50a3      	str	r3, [r4, r2]
 800477c:	e7ab      	b.n	80046d6 <_malloc_r+0x22>
 800477e:	42a3      	cmp	r3, r4
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	d1dd      	bne.n	8004740 <_malloc_r+0x8c>
 8004784:	f8c8 2000 	str.w	r2, [r8]
 8004788:	e7ec      	b.n	8004764 <_malloc_r+0xb0>
 800478a:	4623      	mov	r3, r4
 800478c:	6864      	ldr	r4, [r4, #4]
 800478e:	e7ac      	b.n	80046ea <_malloc_r+0x36>
 8004790:	4634      	mov	r4, r6
 8004792:	6876      	ldr	r6, [r6, #4]
 8004794:	e7b4      	b.n	8004700 <_malloc_r+0x4c>
 8004796:	4613      	mov	r3, r2
 8004798:	e7cc      	b.n	8004734 <_malloc_r+0x80>
 800479a:	230c      	movs	r3, #12
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4638      	mov	r0, r7
 80047a0:	f000 f80e 	bl	80047c0 <__malloc_unlock>
 80047a4:	e797      	b.n	80046d6 <_malloc_r+0x22>
 80047a6:	6025      	str	r5, [r4, #0]
 80047a8:	e7dc      	b.n	8004764 <_malloc_r+0xb0>
 80047aa:	605b      	str	r3, [r3, #4]
 80047ac:	deff      	udf	#255	; 0xff
 80047ae:	bf00      	nop
 80047b0:	200002b8 	.word	0x200002b8

080047b4 <__malloc_lock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <__malloc_lock+0x8>)
 80047b6:	f7ff bf0f 	b.w	80045d8 <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	200002b4 	.word	0x200002b4

080047c0 <__malloc_unlock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	; (80047c8 <__malloc_unlock+0x8>)
 80047c2:	f7ff bf0a 	b.w	80045da <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	200002b4 	.word	0x200002b4

080047cc <__ssputs_r>:
 80047cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	688e      	ldr	r6, [r1, #8]
 80047d2:	461f      	mov	r7, r3
 80047d4:	42be      	cmp	r6, r7
 80047d6:	680b      	ldr	r3, [r1, #0]
 80047d8:	4682      	mov	sl, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	4690      	mov	r8, r2
 80047de:	d82c      	bhi.n	800483a <__ssputs_r+0x6e>
 80047e0:	898a      	ldrh	r2, [r1, #12]
 80047e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047e6:	d026      	beq.n	8004836 <__ssputs_r+0x6a>
 80047e8:	6965      	ldr	r5, [r4, #20]
 80047ea:	6909      	ldr	r1, [r1, #16]
 80047ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047f0:	eba3 0901 	sub.w	r9, r3, r1
 80047f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047f8:	1c7b      	adds	r3, r7, #1
 80047fa:	444b      	add	r3, r9
 80047fc:	106d      	asrs	r5, r5, #1
 80047fe:	429d      	cmp	r5, r3
 8004800:	bf38      	it	cc
 8004802:	461d      	movcc	r5, r3
 8004804:	0553      	lsls	r3, r2, #21
 8004806:	d527      	bpl.n	8004858 <__ssputs_r+0x8c>
 8004808:	4629      	mov	r1, r5
 800480a:	f7ff ff53 	bl	80046b4 <_malloc_r>
 800480e:	4606      	mov	r6, r0
 8004810:	b360      	cbz	r0, 800486c <__ssputs_r+0xa0>
 8004812:	6921      	ldr	r1, [r4, #16]
 8004814:	464a      	mov	r2, r9
 8004816:	f000 faeb 	bl	8004df0 <memcpy>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	6126      	str	r6, [r4, #16]
 8004828:	6165      	str	r5, [r4, #20]
 800482a:	444e      	add	r6, r9
 800482c:	eba5 0509 	sub.w	r5, r5, r9
 8004830:	6026      	str	r6, [r4, #0]
 8004832:	60a5      	str	r5, [r4, #8]
 8004834:	463e      	mov	r6, r7
 8004836:	42be      	cmp	r6, r7
 8004838:	d900      	bls.n	800483c <__ssputs_r+0x70>
 800483a:	463e      	mov	r6, r7
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	4632      	mov	r2, r6
 8004840:	4641      	mov	r1, r8
 8004842:	f000 faab 	bl	8004d9c <memmove>
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	1b9b      	subs	r3, r3, r6
 800484a:	60a3      	str	r3, [r4, #8]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	4433      	add	r3, r6
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	2000      	movs	r0, #0
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	462a      	mov	r2, r5
 800485a:	f000 fad7 	bl	8004e0c <_realloc_r>
 800485e:	4606      	mov	r6, r0
 8004860:	2800      	cmp	r0, #0
 8004862:	d1e0      	bne.n	8004826 <__ssputs_r+0x5a>
 8004864:	6921      	ldr	r1, [r4, #16]
 8004866:	4650      	mov	r0, sl
 8004868:	f7ff feb8 	bl	80045dc <_free_r>
 800486c:	230c      	movs	r3, #12
 800486e:	f8ca 3000 	str.w	r3, [sl]
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	f04f 30ff 	mov.w	r0, #4294967295
 800487e:	e7e9      	b.n	8004854 <__ssputs_r+0x88>

08004880 <_svfiprintf_r>:
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	4698      	mov	r8, r3
 8004886:	898b      	ldrh	r3, [r1, #12]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	b09d      	sub	sp, #116	; 0x74
 800488c:	4607      	mov	r7, r0
 800488e:	460d      	mov	r5, r1
 8004890:	4614      	mov	r4, r2
 8004892:	d50e      	bpl.n	80048b2 <_svfiprintf_r+0x32>
 8004894:	690b      	ldr	r3, [r1, #16]
 8004896:	b963      	cbnz	r3, 80048b2 <_svfiprintf_r+0x32>
 8004898:	2140      	movs	r1, #64	; 0x40
 800489a:	f7ff ff0b 	bl	80046b4 <_malloc_r>
 800489e:	6028      	str	r0, [r5, #0]
 80048a0:	6128      	str	r0, [r5, #16]
 80048a2:	b920      	cbnz	r0, 80048ae <_svfiprintf_r+0x2e>
 80048a4:	230c      	movs	r3, #12
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	e0d0      	b.n	8004a50 <_svfiprintf_r+0x1d0>
 80048ae:	2340      	movs	r3, #64	; 0x40
 80048b0:	616b      	str	r3, [r5, #20]
 80048b2:	2300      	movs	r3, #0
 80048b4:	9309      	str	r3, [sp, #36]	; 0x24
 80048b6:	2320      	movs	r3, #32
 80048b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80048c0:	2330      	movs	r3, #48	; 0x30
 80048c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a68 <_svfiprintf_r+0x1e8>
 80048c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ca:	f04f 0901 	mov.w	r9, #1
 80048ce:	4623      	mov	r3, r4
 80048d0:	469a      	mov	sl, r3
 80048d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048d6:	b10a      	cbz	r2, 80048dc <_svfiprintf_r+0x5c>
 80048d8:	2a25      	cmp	r2, #37	; 0x25
 80048da:	d1f9      	bne.n	80048d0 <_svfiprintf_r+0x50>
 80048dc:	ebba 0b04 	subs.w	fp, sl, r4
 80048e0:	d00b      	beq.n	80048fa <_svfiprintf_r+0x7a>
 80048e2:	465b      	mov	r3, fp
 80048e4:	4622      	mov	r2, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	4638      	mov	r0, r7
 80048ea:	f7ff ff6f 	bl	80047cc <__ssputs_r>
 80048ee:	3001      	adds	r0, #1
 80048f0:	f000 80a9 	beq.w	8004a46 <_svfiprintf_r+0x1c6>
 80048f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048f6:	445a      	add	r2, fp
 80048f8:	9209      	str	r2, [sp, #36]	; 0x24
 80048fa:	f89a 3000 	ldrb.w	r3, [sl]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80a1 	beq.w	8004a46 <_svfiprintf_r+0x1c6>
 8004904:	2300      	movs	r3, #0
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800490e:	f10a 0a01 	add.w	sl, sl, #1
 8004912:	9304      	str	r3, [sp, #16]
 8004914:	9307      	str	r3, [sp, #28]
 8004916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800491a:	931a      	str	r3, [sp, #104]	; 0x68
 800491c:	4654      	mov	r4, sl
 800491e:	2205      	movs	r2, #5
 8004920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004924:	4850      	ldr	r0, [pc, #320]	; (8004a68 <_svfiprintf_r+0x1e8>)
 8004926:	f7fb fc7b 	bl	8000220 <memchr>
 800492a:	9a04      	ldr	r2, [sp, #16]
 800492c:	b9d8      	cbnz	r0, 8004966 <_svfiprintf_r+0xe6>
 800492e:	06d0      	lsls	r0, r2, #27
 8004930:	bf44      	itt	mi
 8004932:	2320      	movmi	r3, #32
 8004934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004938:	0711      	lsls	r1, r2, #28
 800493a:	bf44      	itt	mi
 800493c:	232b      	movmi	r3, #43	; 0x2b
 800493e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004942:	f89a 3000 	ldrb.w	r3, [sl]
 8004946:	2b2a      	cmp	r3, #42	; 0x2a
 8004948:	d015      	beq.n	8004976 <_svfiprintf_r+0xf6>
 800494a:	9a07      	ldr	r2, [sp, #28]
 800494c:	4654      	mov	r4, sl
 800494e:	2000      	movs	r0, #0
 8004950:	f04f 0c0a 	mov.w	ip, #10
 8004954:	4621      	mov	r1, r4
 8004956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800495a:	3b30      	subs	r3, #48	; 0x30
 800495c:	2b09      	cmp	r3, #9
 800495e:	d94d      	bls.n	80049fc <_svfiprintf_r+0x17c>
 8004960:	b1b0      	cbz	r0, 8004990 <_svfiprintf_r+0x110>
 8004962:	9207      	str	r2, [sp, #28]
 8004964:	e014      	b.n	8004990 <_svfiprintf_r+0x110>
 8004966:	eba0 0308 	sub.w	r3, r0, r8
 800496a:	fa09 f303 	lsl.w	r3, r9, r3
 800496e:	4313      	orrs	r3, r2
 8004970:	9304      	str	r3, [sp, #16]
 8004972:	46a2      	mov	sl, r4
 8004974:	e7d2      	b.n	800491c <_svfiprintf_r+0x9c>
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	1d19      	adds	r1, r3, #4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	9103      	str	r1, [sp, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfbb      	ittet	lt
 8004982:	425b      	neglt	r3, r3
 8004984:	f042 0202 	orrlt.w	r2, r2, #2
 8004988:	9307      	strge	r3, [sp, #28]
 800498a:	9307      	strlt	r3, [sp, #28]
 800498c:	bfb8      	it	lt
 800498e:	9204      	strlt	r2, [sp, #16]
 8004990:	7823      	ldrb	r3, [r4, #0]
 8004992:	2b2e      	cmp	r3, #46	; 0x2e
 8004994:	d10c      	bne.n	80049b0 <_svfiprintf_r+0x130>
 8004996:	7863      	ldrb	r3, [r4, #1]
 8004998:	2b2a      	cmp	r3, #42	; 0x2a
 800499a:	d134      	bne.n	8004a06 <_svfiprintf_r+0x186>
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	1d1a      	adds	r2, r3, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	9203      	str	r2, [sp, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bfb8      	it	lt
 80049a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80049ac:	3402      	adds	r4, #2
 80049ae:	9305      	str	r3, [sp, #20]
 80049b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a78 <_svfiprintf_r+0x1f8>
 80049b4:	7821      	ldrb	r1, [r4, #0]
 80049b6:	2203      	movs	r2, #3
 80049b8:	4650      	mov	r0, sl
 80049ba:	f7fb fc31 	bl	8000220 <memchr>
 80049be:	b138      	cbz	r0, 80049d0 <_svfiprintf_r+0x150>
 80049c0:	9b04      	ldr	r3, [sp, #16]
 80049c2:	eba0 000a 	sub.w	r0, r0, sl
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	4082      	lsls	r2, r0
 80049ca:	4313      	orrs	r3, r2
 80049cc:	3401      	adds	r4, #1
 80049ce:	9304      	str	r3, [sp, #16]
 80049d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d4:	4825      	ldr	r0, [pc, #148]	; (8004a6c <_svfiprintf_r+0x1ec>)
 80049d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049da:	2206      	movs	r2, #6
 80049dc:	f7fb fc20 	bl	8000220 <memchr>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d038      	beq.n	8004a56 <_svfiprintf_r+0x1d6>
 80049e4:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <_svfiprintf_r+0x1f0>)
 80049e6:	bb1b      	cbnz	r3, 8004a30 <_svfiprintf_r+0x1b0>
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	3307      	adds	r3, #7
 80049ec:	f023 0307 	bic.w	r3, r3, #7
 80049f0:	3308      	adds	r3, #8
 80049f2:	9303      	str	r3, [sp, #12]
 80049f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f6:	4433      	add	r3, r6
 80049f8:	9309      	str	r3, [sp, #36]	; 0x24
 80049fa:	e768      	b.n	80048ce <_svfiprintf_r+0x4e>
 80049fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a00:	460c      	mov	r4, r1
 8004a02:	2001      	movs	r0, #1
 8004a04:	e7a6      	b.n	8004954 <_svfiprintf_r+0xd4>
 8004a06:	2300      	movs	r3, #0
 8004a08:	3401      	adds	r4, #1
 8004a0a:	9305      	str	r3, [sp, #20]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f04f 0c0a 	mov.w	ip, #10
 8004a12:	4620      	mov	r0, r4
 8004a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a18:	3a30      	subs	r2, #48	; 0x30
 8004a1a:	2a09      	cmp	r2, #9
 8004a1c:	d903      	bls.n	8004a26 <_svfiprintf_r+0x1a6>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0c6      	beq.n	80049b0 <_svfiprintf_r+0x130>
 8004a22:	9105      	str	r1, [sp, #20]
 8004a24:	e7c4      	b.n	80049b0 <_svfiprintf_r+0x130>
 8004a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e7f0      	b.n	8004a12 <_svfiprintf_r+0x192>
 8004a30:	ab03      	add	r3, sp, #12
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	462a      	mov	r2, r5
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <_svfiprintf_r+0x1f4>)
 8004a38:	a904      	add	r1, sp, #16
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f3af 8000 	nop.w
 8004a40:	1c42      	adds	r2, r0, #1
 8004a42:	4606      	mov	r6, r0
 8004a44:	d1d6      	bne.n	80049f4 <_svfiprintf_r+0x174>
 8004a46:	89ab      	ldrh	r3, [r5, #12]
 8004a48:	065b      	lsls	r3, r3, #25
 8004a4a:	f53f af2d 	bmi.w	80048a8 <_svfiprintf_r+0x28>
 8004a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a50:	b01d      	add	sp, #116	; 0x74
 8004a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a56:	ab03      	add	r3, sp, #12
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <_svfiprintf_r+0x1f4>)
 8004a5e:	a904      	add	r1, sp, #16
 8004a60:	4638      	mov	r0, r7
 8004a62:	f000 f879 	bl	8004b58 <_printf_i>
 8004a66:	e7eb      	b.n	8004a40 <_svfiprintf_r+0x1c0>
 8004a68:	08004ee4 	.word	0x08004ee4
 8004a6c:	08004eee 	.word	0x08004eee
 8004a70:	00000000 	.word	0x00000000
 8004a74:	080047cd 	.word	0x080047cd
 8004a78:	08004eea 	.word	0x08004eea

08004a7c <_printf_common>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	4616      	mov	r6, r2
 8004a82:	4699      	mov	r9, r3
 8004a84:	688a      	ldr	r2, [r1, #8]
 8004a86:	690b      	ldr	r3, [r1, #16]
 8004a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bfb8      	it	lt
 8004a90:	4613      	movlt	r3, r2
 8004a92:	6033      	str	r3, [r6, #0]
 8004a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a98:	4607      	mov	r7, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	b10a      	cbz	r2, 8004aa2 <_printf_common+0x26>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	bf42      	ittt	mi
 8004aa8:	6833      	ldrmi	r3, [r6, #0]
 8004aaa:	3302      	addmi	r3, #2
 8004aac:	6033      	strmi	r3, [r6, #0]
 8004aae:	6825      	ldr	r5, [r4, #0]
 8004ab0:	f015 0506 	ands.w	r5, r5, #6
 8004ab4:	d106      	bne.n	8004ac4 <_printf_common+0x48>
 8004ab6:	f104 0a19 	add.w	sl, r4, #25
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	6832      	ldr	r2, [r6, #0]
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dc26      	bgt.n	8004b12 <_printf_common+0x96>
 8004ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ac8:	1e13      	subs	r3, r2, #0
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	bf18      	it	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	0692      	lsls	r2, r2, #26
 8004ad2:	d42b      	bmi.n	8004b2c <_printf_common+0xb0>
 8004ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ad8:	4649      	mov	r1, r9
 8004ada:	4638      	mov	r0, r7
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d01e      	beq.n	8004b20 <_printf_common+0xa4>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	6922      	ldr	r2, [r4, #16]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf02      	ittt	eq
 8004aee:	68e5      	ldreq	r5, [r4, #12]
 8004af0:	6833      	ldreq	r3, [r6, #0]
 8004af2:	1aed      	subeq	r5, r5, r3
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	bf0c      	ite	eq
 8004af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004afc:	2500      	movne	r5, #0
 8004afe:	4293      	cmp	r3, r2
 8004b00:	bfc4      	itt	gt
 8004b02:	1a9b      	subgt	r3, r3, r2
 8004b04:	18ed      	addgt	r5, r5, r3
 8004b06:	2600      	movs	r6, #0
 8004b08:	341a      	adds	r4, #26
 8004b0a:	42b5      	cmp	r5, r6
 8004b0c:	d11a      	bne.n	8004b44 <_printf_common+0xc8>
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e008      	b.n	8004b24 <_printf_common+0xa8>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4652      	mov	r2, sl
 8004b16:	4649      	mov	r1, r9
 8004b18:	4638      	mov	r0, r7
 8004b1a:	47c0      	blx	r8
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d103      	bne.n	8004b28 <_printf_common+0xac>
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b28:	3501      	adds	r5, #1
 8004b2a:	e7c6      	b.n	8004aba <_printf_common+0x3e>
 8004b2c:	18e1      	adds	r1, r4, r3
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	2030      	movs	r0, #48	; 0x30
 8004b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b36:	4422      	add	r2, r4
 8004b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b40:	3302      	adds	r3, #2
 8004b42:	e7c7      	b.n	8004ad4 <_printf_common+0x58>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4622      	mov	r2, r4
 8004b48:	4649      	mov	r1, r9
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c0      	blx	r8
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d0e6      	beq.n	8004b20 <_printf_common+0xa4>
 8004b52:	3601      	adds	r6, #1
 8004b54:	e7d9      	b.n	8004b0a <_printf_common+0x8e>
	...

08004b58 <_printf_i>:
 8004b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	7e0f      	ldrb	r7, [r1, #24]
 8004b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b60:	2f78      	cmp	r7, #120	; 0x78
 8004b62:	4691      	mov	r9, r2
 8004b64:	4680      	mov	r8, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	469a      	mov	sl, r3
 8004b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b6e:	d807      	bhi.n	8004b80 <_printf_i+0x28>
 8004b70:	2f62      	cmp	r7, #98	; 0x62
 8004b72:	d80a      	bhi.n	8004b8a <_printf_i+0x32>
 8004b74:	2f00      	cmp	r7, #0
 8004b76:	f000 80d4 	beq.w	8004d22 <_printf_i+0x1ca>
 8004b7a:	2f58      	cmp	r7, #88	; 0x58
 8004b7c:	f000 80c0 	beq.w	8004d00 <_printf_i+0x1a8>
 8004b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b88:	e03a      	b.n	8004c00 <_printf_i+0xa8>
 8004b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b8e:	2b15      	cmp	r3, #21
 8004b90:	d8f6      	bhi.n	8004b80 <_printf_i+0x28>
 8004b92:	a101      	add	r1, pc, #4	; (adr r1, 8004b98 <_printf_i+0x40>)
 8004b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004c05 	.word	0x08004c05
 8004ba0:	08004b81 	.word	0x08004b81
 8004ba4:	08004b81 	.word	0x08004b81
 8004ba8:	08004b81 	.word	0x08004b81
 8004bac:	08004b81 	.word	0x08004b81
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004b81 	.word	0x08004b81
 8004bb8:	08004b81 	.word	0x08004b81
 8004bbc:	08004b81 	.word	0x08004b81
 8004bc0:	08004b81 	.word	0x08004b81
 8004bc4:	08004d09 	.word	0x08004d09
 8004bc8:	08004c31 	.word	0x08004c31
 8004bcc:	08004cc3 	.word	0x08004cc3
 8004bd0:	08004b81 	.word	0x08004b81
 8004bd4:	08004b81 	.word	0x08004b81
 8004bd8:	08004d2b 	.word	0x08004d2b
 8004bdc:	08004b81 	.word	0x08004b81
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004b81 	.word	0x08004b81
 8004be8:	08004b81 	.word	0x08004b81
 8004bec:	08004ccb 	.word	0x08004ccb
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	1d1a      	adds	r2, r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c00:	2301      	movs	r3, #1
 8004c02:	e09f      	b.n	8004d44 <_printf_i+0x1ec>
 8004c04:	6820      	ldr	r0, [r4, #0]
 8004c06:	682b      	ldr	r3, [r5, #0]
 8004c08:	0607      	lsls	r7, r0, #24
 8004c0a:	f103 0104 	add.w	r1, r3, #4
 8004c0e:	6029      	str	r1, [r5, #0]
 8004c10:	d501      	bpl.n	8004c16 <_printf_i+0xbe>
 8004c12:	681e      	ldr	r6, [r3, #0]
 8004c14:	e003      	b.n	8004c1e <_printf_i+0xc6>
 8004c16:	0646      	lsls	r6, r0, #25
 8004c18:	d5fb      	bpl.n	8004c12 <_printf_i+0xba>
 8004c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c1e:	2e00      	cmp	r6, #0
 8004c20:	da03      	bge.n	8004c2a <_printf_i+0xd2>
 8004c22:	232d      	movs	r3, #45	; 0x2d
 8004c24:	4276      	negs	r6, r6
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2a:	485a      	ldr	r0, [pc, #360]	; (8004d94 <_printf_i+0x23c>)
 8004c2c:	230a      	movs	r3, #10
 8004c2e:	e012      	b.n	8004c56 <_printf_i+0xfe>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	6820      	ldr	r0, [r4, #0]
 8004c34:	1d19      	adds	r1, r3, #4
 8004c36:	6029      	str	r1, [r5, #0]
 8004c38:	0605      	lsls	r5, r0, #24
 8004c3a:	d501      	bpl.n	8004c40 <_printf_i+0xe8>
 8004c3c:	681e      	ldr	r6, [r3, #0]
 8004c3e:	e002      	b.n	8004c46 <_printf_i+0xee>
 8004c40:	0641      	lsls	r1, r0, #25
 8004c42:	d5fb      	bpl.n	8004c3c <_printf_i+0xe4>
 8004c44:	881e      	ldrh	r6, [r3, #0]
 8004c46:	4853      	ldr	r0, [pc, #332]	; (8004d94 <_printf_i+0x23c>)
 8004c48:	2f6f      	cmp	r7, #111	; 0x6f
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2308      	moveq	r3, #8
 8004c4e:	230a      	movne	r3, #10
 8004c50:	2100      	movs	r1, #0
 8004c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c56:	6865      	ldr	r5, [r4, #4]
 8004c58:	60a5      	str	r5, [r4, #8]
 8004c5a:	2d00      	cmp	r5, #0
 8004c5c:	bfa2      	ittt	ge
 8004c5e:	6821      	ldrge	r1, [r4, #0]
 8004c60:	f021 0104 	bicge.w	r1, r1, #4
 8004c64:	6021      	strge	r1, [r4, #0]
 8004c66:	b90e      	cbnz	r6, 8004c6c <_printf_i+0x114>
 8004c68:	2d00      	cmp	r5, #0
 8004c6a:	d04b      	beq.n	8004d04 <_printf_i+0x1ac>
 8004c6c:	4615      	mov	r5, r2
 8004c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c72:	fb03 6711 	mls	r7, r3, r1, r6
 8004c76:	5dc7      	ldrb	r7, [r0, r7]
 8004c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c7c:	4637      	mov	r7, r6
 8004c7e:	42bb      	cmp	r3, r7
 8004c80:	460e      	mov	r6, r1
 8004c82:	d9f4      	bls.n	8004c6e <_printf_i+0x116>
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d10b      	bne.n	8004ca0 <_printf_i+0x148>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	07de      	lsls	r6, r3, #31
 8004c8c:	d508      	bpl.n	8004ca0 <_printf_i+0x148>
 8004c8e:	6923      	ldr	r3, [r4, #16]
 8004c90:	6861      	ldr	r1, [r4, #4]
 8004c92:	4299      	cmp	r1, r3
 8004c94:	bfde      	ittt	le
 8004c96:	2330      	movle	r3, #48	; 0x30
 8004c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ca0:	1b52      	subs	r2, r2, r5
 8004ca2:	6122      	str	r2, [r4, #16]
 8004ca4:	f8cd a000 	str.w	sl, [sp]
 8004ca8:	464b      	mov	r3, r9
 8004caa:	aa03      	add	r2, sp, #12
 8004cac:	4621      	mov	r1, r4
 8004cae:	4640      	mov	r0, r8
 8004cb0:	f7ff fee4 	bl	8004a7c <_printf_common>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d14a      	bne.n	8004d4e <_printf_i+0x1f6>
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	b004      	add	sp, #16
 8004cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	f043 0320 	orr.w	r3, r3, #32
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	4833      	ldr	r0, [pc, #204]	; (8004d98 <_printf_i+0x240>)
 8004ccc:	2778      	movs	r7, #120	; 0x78
 8004cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	6829      	ldr	r1, [r5, #0]
 8004cd6:	061f      	lsls	r7, r3, #24
 8004cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cdc:	d402      	bmi.n	8004ce4 <_printf_i+0x18c>
 8004cde:	065f      	lsls	r7, r3, #25
 8004ce0:	bf48      	it	mi
 8004ce2:	b2b6      	uxthmi	r6, r6
 8004ce4:	07df      	lsls	r7, r3, #31
 8004ce6:	bf48      	it	mi
 8004ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8004cec:	6029      	str	r1, [r5, #0]
 8004cee:	bf48      	it	mi
 8004cf0:	6023      	strmi	r3, [r4, #0]
 8004cf2:	b91e      	cbnz	r6, 8004cfc <_printf_i+0x1a4>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	f023 0320 	bic.w	r3, r3, #32
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	e7a7      	b.n	8004c50 <_printf_i+0xf8>
 8004d00:	4824      	ldr	r0, [pc, #144]	; (8004d94 <_printf_i+0x23c>)
 8004d02:	e7e4      	b.n	8004cce <_printf_i+0x176>
 8004d04:	4615      	mov	r5, r2
 8004d06:	e7bd      	b.n	8004c84 <_printf_i+0x12c>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	6826      	ldr	r6, [r4, #0]
 8004d0c:	6961      	ldr	r1, [r4, #20]
 8004d0e:	1d18      	adds	r0, r3, #4
 8004d10:	6028      	str	r0, [r5, #0]
 8004d12:	0635      	lsls	r5, r6, #24
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	d501      	bpl.n	8004d1c <_printf_i+0x1c4>
 8004d18:	6019      	str	r1, [r3, #0]
 8004d1a:	e002      	b.n	8004d22 <_printf_i+0x1ca>
 8004d1c:	0670      	lsls	r0, r6, #25
 8004d1e:	d5fb      	bpl.n	8004d18 <_printf_i+0x1c0>
 8004d20:	8019      	strh	r1, [r3, #0]
 8004d22:	2300      	movs	r3, #0
 8004d24:	6123      	str	r3, [r4, #16]
 8004d26:	4615      	mov	r5, r2
 8004d28:	e7bc      	b.n	8004ca4 <_printf_i+0x14c>
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	1d1a      	adds	r2, r3, #4
 8004d2e:	602a      	str	r2, [r5, #0]
 8004d30:	681d      	ldr	r5, [r3, #0]
 8004d32:	6862      	ldr	r2, [r4, #4]
 8004d34:	2100      	movs	r1, #0
 8004d36:	4628      	mov	r0, r5
 8004d38:	f7fb fa72 	bl	8000220 <memchr>
 8004d3c:	b108      	cbz	r0, 8004d42 <_printf_i+0x1ea>
 8004d3e:	1b40      	subs	r0, r0, r5
 8004d40:	6060      	str	r0, [r4, #4]
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	2300      	movs	r3, #0
 8004d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4c:	e7aa      	b.n	8004ca4 <_printf_i+0x14c>
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	462a      	mov	r2, r5
 8004d52:	4649      	mov	r1, r9
 8004d54:	4640      	mov	r0, r8
 8004d56:	47d0      	blx	sl
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d0ad      	beq.n	8004cb8 <_printf_i+0x160>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	079b      	lsls	r3, r3, #30
 8004d60:	d413      	bmi.n	8004d8a <_printf_i+0x232>
 8004d62:	68e0      	ldr	r0, [r4, #12]
 8004d64:	9b03      	ldr	r3, [sp, #12]
 8004d66:	4298      	cmp	r0, r3
 8004d68:	bfb8      	it	lt
 8004d6a:	4618      	movlt	r0, r3
 8004d6c:	e7a6      	b.n	8004cbc <_printf_i+0x164>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4632      	mov	r2, r6
 8004d72:	4649      	mov	r1, r9
 8004d74:	4640      	mov	r0, r8
 8004d76:	47d0      	blx	sl
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d09d      	beq.n	8004cb8 <_printf_i+0x160>
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	9903      	ldr	r1, [sp, #12]
 8004d82:	1a5b      	subs	r3, r3, r1
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dcf2      	bgt.n	8004d6e <_printf_i+0x216>
 8004d88:	e7eb      	b.n	8004d62 <_printf_i+0x20a>
 8004d8a:	2500      	movs	r5, #0
 8004d8c:	f104 0619 	add.w	r6, r4, #25
 8004d90:	e7f5      	b.n	8004d7e <_printf_i+0x226>
 8004d92:	bf00      	nop
 8004d94:	08004ef5 	.word	0x08004ef5
 8004d98:	08004f06 	.word	0x08004f06

08004d9c <memmove>:
 8004d9c:	4288      	cmp	r0, r1
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	eb01 0402 	add.w	r4, r1, r2
 8004da4:	d902      	bls.n	8004dac <memmove+0x10>
 8004da6:	4284      	cmp	r4, r0
 8004da8:	4623      	mov	r3, r4
 8004daa:	d807      	bhi.n	8004dbc <memmove+0x20>
 8004dac:	1e43      	subs	r3, r0, #1
 8004dae:	42a1      	cmp	r1, r4
 8004db0:	d008      	beq.n	8004dc4 <memmove+0x28>
 8004db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dba:	e7f8      	b.n	8004dae <memmove+0x12>
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	428a      	cmp	r2, r1
 8004dc2:	d100      	bne.n	8004dc6 <memmove+0x2a>
 8004dc4:	bd10      	pop	{r4, pc}
 8004dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dce:	e7f7      	b.n	8004dc0 <memmove+0x24>

08004dd0 <_sbrk_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d06      	ldr	r5, [pc, #24]	; (8004dec <_sbrk_r+0x1c>)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	f7fb fdfc 	bl	80009d8 <_sbrk>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_sbrk_r+0x1a>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_sbrk_r+0x1a>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	200002b0 	.word	0x200002b0

08004df0 <memcpy>:
 8004df0:	440a      	add	r2, r1
 8004df2:	4291      	cmp	r1, r2
 8004df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004df8:	d100      	bne.n	8004dfc <memcpy+0xc>
 8004dfa:	4770      	bx	lr
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e06:	4291      	cmp	r1, r2
 8004e08:	d1f9      	bne.n	8004dfe <memcpy+0xe>
 8004e0a:	bd10      	pop	{r4, pc}

08004e0c <_realloc_r>:
 8004e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e10:	4680      	mov	r8, r0
 8004e12:	4614      	mov	r4, r2
 8004e14:	460e      	mov	r6, r1
 8004e16:	b921      	cbnz	r1, 8004e22 <_realloc_r+0x16>
 8004e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	f7ff bc49 	b.w	80046b4 <_malloc_r>
 8004e22:	b92a      	cbnz	r2, 8004e30 <_realloc_r+0x24>
 8004e24:	f7ff fbda 	bl	80045dc <_free_r>
 8004e28:	4625      	mov	r5, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e30:	f000 f81b 	bl	8004e6a <_malloc_usable_size_r>
 8004e34:	4284      	cmp	r4, r0
 8004e36:	4607      	mov	r7, r0
 8004e38:	d802      	bhi.n	8004e40 <_realloc_r+0x34>
 8004e3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e3e:	d812      	bhi.n	8004e66 <_realloc_r+0x5a>
 8004e40:	4621      	mov	r1, r4
 8004e42:	4640      	mov	r0, r8
 8004e44:	f7ff fc36 	bl	80046b4 <_malloc_r>
 8004e48:	4605      	mov	r5, r0
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0ed      	beq.n	8004e2a <_realloc_r+0x1e>
 8004e4e:	42bc      	cmp	r4, r7
 8004e50:	4622      	mov	r2, r4
 8004e52:	4631      	mov	r1, r6
 8004e54:	bf28      	it	cs
 8004e56:	463a      	movcs	r2, r7
 8004e58:	f7ff ffca 	bl	8004df0 <memcpy>
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4640      	mov	r0, r8
 8004e60:	f7ff fbbc 	bl	80045dc <_free_r>
 8004e64:	e7e1      	b.n	8004e2a <_realloc_r+0x1e>
 8004e66:	4635      	mov	r5, r6
 8004e68:	e7df      	b.n	8004e2a <_realloc_r+0x1e>

08004e6a <_malloc_usable_size_r>:
 8004e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6e:	1f18      	subs	r0, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bfbc      	itt	lt
 8004e74:	580b      	ldrlt	r3, [r1, r0]
 8004e76:	18c0      	addlt	r0, r0, r3
 8004e78:	4770      	bx	lr
	...

08004e7c <_init>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	bf00      	nop
 8004e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e82:	bc08      	pop	{r3}
 8004e84:	469e      	mov	lr, r3
 8004e86:	4770      	bx	lr

08004e88 <_fini>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr
